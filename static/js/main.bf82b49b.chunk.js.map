{"version":3,"sources":["Resources/images/index.js","Components/Library/Card/Card.tsx","Components/Library/Card/index.ts","Resources/images/self/headshot.jpg","Resources/images/logos/ketomate.png","Resources/images/logos/nike.jpg","Resources/images/logos/hp.png","Resources/images/logos/reactLogo.svg","Resources/images/portfolio/agechart.jpg","Resources/images/portfolio/experiencechart.jpg","Resources/images/portfolio/genderchart.jpg","Resources/images/portfolio/ketomate10k.jpg","Resources/images/portfolio/km_active.jpg","Resources/images/portfolio/km_advanced.jpg","Resources/images/portfolio/km_bodyfat.jpg","Resources/images/portfolio/km_faq.jpg","Resources/images/portfolio/km_home.jpg","Resources/images/portfolio/km_intro.jpg","Resources/images/portfolio/km_menu.jpg","Resources/images/portfolio/km_results.jpg","Resources/images/portfolio/metricmedia.jpg","Resources/images/portfolio/metricmediaspeed.jpg","Resources/images/portfolio/mylifter.jpg","Resources/images/portfolio/phoenixstone.jpg","Resources/images/portfolio/phoenixstone_speed.jpg","Resources/images/portfolio/vanderhall.jpg","App.tsx","Components/Home/Home.tsx","Components/Home/Home.codeview.tsx","Components/Stocktwits/Stocktwits.tsx","Components/Stocktwits/StockTwits.codeview.tsx","Components/XKCD/xkcd.tsx","Components/XKCD/xkcd.codeview.tsx","Components/Portfolio/Portfolio.tsx","Components/Portfolio/Portfolio.codeview.tsx","Components/Library/Library.codeview.tsx","Components/Library/Portal/Portal.tsx","Components/Library/Portal/Portal.codeview.tsx","Components/Library/App.codeview.tsx","Components/Library/Card/Card.codeview.tsx","Components/Library/Header/Header.codeview.tsx","Components/Library/NavBar/NavBar.codeview.tsx","Components/Library/Library.tsx","Components/Library/Header/Header.tsx","Components/Library/Header/index.ts","Components/Library/NavBar/NavBar.tsx","Components/Library/NavBar/index.ts","Components/Library/LoadScreen/LoadScreen.tsx","Components/Library/LoadScreen/index.ts","webpack:///./src/Components/Home/Home.tsx?3ad6","webpack:///./src/Components/Stocktwits/Stocktwits.tsx?fe6a","webpack:///./src/Components/XKCD/xkcd.tsx?b0f2","webpack:///./src/App.tsx?5434","webpack:///./src/Components/Library/Card/Card.tsx?cb1e","webpack:///./src/Components/Library/Header/Header.tsx?bd58","webpack:///./src/Components/Library/NavBar/NavBar.tsx?9ba5","webpack:///./src/Components/Library/Library.tsx?ebb4","webpack:///./src/Components/Library/Portal/Portal.tsx?9da1","serviceWorker.ts","index.tsx"],"names":["CardTemplate","props","img","title","text","content","classGiven","links","Card","className","CardMedia","image","generateMedia","CardContent","genContent","push","generateContent","generatedLinks","link","href","url","onClick","target","rel","Button","fullWidth","CardActions","generateLinks","module","exports","App","useState","navShow","setNavShow","navShowClass","setNavShowClass","pages","route","icon","component","codeView","exactRoute","currentPage","setCurrentPage","setCodeView","loading","setLoading","useEffect","toggleNav","toggleCodeView","basename","process","direction","in","mountOnEnter","unmountOnExit","navClick","page","navigate","generateOverlay","generatedContent","path","exact","key","children","generateComponent","Home","experienceIndex","setExperienceIndex","educationIndex","setEducationIndex","homeData","HomeData","experienceLength","educationLength","input","newState","console","log","generateGroupSet","groupSet","groupSetContent","group","groupContent","groupClass","item","dates","primary","classes","description","jobTitle","skills","skill","size","label","formatContent","contentSet","formattedContent","contentGroup","linkset","ketomate","hp","nike","src","alt","skillset","mb","borderColor","name","value","readOnly","generatedGroupSet","groupSetLength","previousIcon","nextIcon","length","variant","startIcon","endIcon","contentArray","formattedArray","Object","values","media","headshot","homeCode","require","default","HomeViewer","viewer","highlight","languages","js","padding","style","fontFamily","fontSize","StockTwits","chips","tweets","state","symbols","error","interval","undefined","currentCount","filter","handleChange","bind","handleSubmit","timer","symbol","chipClass","includes","badgeContent","chipClick","intervalId","setInterval","this","setState","newCount","submitRequest","clearInterval","setTimer","tweetsFound","entries","index","tweet","message","user","username","avatar_url_ssl","body","filteredSymbols","position","indexOf","splice","renderTweets","renderChips","member","proxiedRequest","options","headers","fetch","then","res","json","catch","useUrl","concat","finalUrl","data","messages","newSymbols","toUpperCase","replace","split","formattedSymbols","retrieveTweets","event","preventDefault","id","onChange","InputProps","startAdornment","React","Component","StockViewCode","StockViewer","code","Panel","panelTitle","panelSrc","panelAlt","panelFigure","NavBar","XKCD","images","Array","fill","initialIndex","finalIndex","proxyUrl","currentIndex","urlArray","i","createUrl","finalPlaceholder","num","dataArray","retrieveImages","reactLogo","renderPanels","XKCDCode","XKCDViewer","AutoPlaySwipeableViews","autoPlay","SwipeableViews","Portfolio","portfolioSlides","kmhome","ketomate10k","kmactive","kmresults","kmadvanced","kmbodyfat","kmfaq","kmintro","agechart","experiencechart","genderchart","metricmedia","metricmediaspeed","phoenixstone","phoenixstonespeed","vanderhall","mylifter","activeSlide","maxSlides","axis","onChangeIndex","slide","map","steps","activeStep","backButton","nextButton","portfolioDisplay","PortfolioViewer","readonly","LibraryCode","LibraryViewer","Portal","PortalCode","PortalViewer","AppCode","CardCode","HeaderCode","NavBarCode","Library","components","codeState","setCodeState","generatedOptions","generateOptions","Header","AppBar","IconButton","edge","aria-label","Toolbar","FormControlLabel","control","Switch","checked","generateCodeView","List","populatedPages","to","ListItem","button","ListItemIcon","ListItemText","populatePages","LoadScreen","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bf82b49b.chunk.js","sourcesContent":["import headshot from './self/headshot.jpg';\r\nimport ketomate from './logos/ketomate.png';\r\nimport nike from './logos/nike.jpg';\r\nimport hp from './logos/hp.png';\r\nimport reactLogo from './logos/reactLogo.svg';\r\nimport agechart from './portfolio/agechart.jpg';\r\nimport experiencechart from './portfolio/experiencechart.jpg';\r\nimport genderchart from './portfolio/genderchart.jpg';\r\nimport ketomate10k from './portfolio/ketomate10k.jpg';\r\nimport kmactive from './portfolio/km_active.jpg';\r\nimport kmadvanced from './portfolio/km_advanced.jpg';\r\nimport kmbodyfat from './portfolio/km_bodyfat.jpg';\r\nimport kmfaq from './portfolio/km_faq.jpg';\r\nimport kmhome from './portfolio/km_home.jpg';\r\nimport kmintro from './portfolio/km_intro.jpg';\r\nimport kmmenu from './portfolio/km_menu.jpg';\r\nimport kmresults from './portfolio/km_results.jpg';\r\nimport metricmedia from './portfolio/metricmedia.jpg';\r\nimport metricmediaspeed from './portfolio/metricmediaspeed.jpg';\r\nimport mylifter from './portfolio/mylifter.jpg';\r\nimport phoenixstone from './portfolio/phoenixstone.jpg';\r\nimport phoenixstonespeed from './portfolio/phoenixstone_speed.jpg';\r\nimport vanderhall from './portfolio/vanderhall.jpg';\r\n\r\nexport {\r\n  headshot,\r\n  ketomate,\r\n  nike,\r\n  hp,\r\n  reactLogo,\r\n  agechart,\r\n  experiencechart,\r\n  genderchart,\r\n  ketomate10k,\r\n  kmactive,\r\n  kmadvanced,\r\n  kmbodyfat,\r\n  kmfaq,\r\n  kmhome,\r\n  kmintro,\r\n  kmmenu,\r\n  kmresults,\r\n  metricmedia,\r\n  metricmediaspeed,\r\n  mylifter,\r\n  phoenixstone,\r\n  phoenixstonespeed,\r\n  vanderhall,\r\n};\r\n","import React from 'react';\n\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Button from '@material-ui/core/Button';\n\nconst CardTemplate = (props) => {\n  const { img, title, text, content, classGiven, links } = props;\n\n  const generateLinks = () => {\n    if (links) {\n      let generatedLinks: any[] = [];\n      for (let link of links) {\n        generatedLinks.push(\n          <a\n            href={link.url ? link.url : null}\n            onClick={link.onClick ? link.onClick : null}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            <Button className=\"card-button\" fullWidth>\n              {link.text}\n            </Button>\n          </a>\n        );\n      }\n      return (\n        <CardActions className=\"card-buttons\">{generatedLinks}</CardActions>\n      );\n    }\n  };\n\n  const generateMedia = () => {\n    if (img) {\n      return <CardMedia className=\"media-area\" image={img} title={title} />;\n    }\n  };\n\n  const generateContent = () => {\n    let genContent: any[] = [];\n\n    if (title) {\n      genContent.push(<h2>{title}</h2>);\n    }\n    if (text) {\n      genContent.push(<p>{text}</p>);\n    }\n    if (content) {\n      genContent.push(content);\n    }\n    return genContent;\n  };\n\n  return (\n    <Card className={classGiven}>\n      {generateMedia()}\n      <CardContent>{generateContent()}</CardContent>\n      {generateLinks()}\n    </Card>\n  );\n};\n\nexport default CardTemplate;\n","import CardTemplate from './Card';\r\n\r\nexport default CardTemplate;\r\n","module.exports = __webpack_public_path__ + \"static/media/headshot.6b5fedd2.jpg\";","module.exports = __webpack_public_path__ + \"static/media/ketomate.2f18545e.png\";","module.exports = __webpack_public_path__ + \"static/media/nike.7e6650f3.jpg\";","module.exports = __webpack_public_path__ + \"static/media/hp.6c7f5204.png\";","module.exports = __webpack_public_path__ + \"static/media/reactLogo.5d5d9eef.svg\";","module.exports = __webpack_public_path__ + \"static/media/agechart.482ea8fd.jpg\";","module.exports = __webpack_public_path__ + \"static/media/experiencechart.b28bac1c.jpg\";","module.exports = __webpack_public_path__ + \"static/media/genderchart.756b4563.jpg\";","module.exports = __webpack_public_path__ + \"static/media/ketomate10k.e4fb5668.jpg\";","module.exports = __webpack_public_path__ + \"static/media/km_active.b8c32024.jpg\";","module.exports = __webpack_public_path__ + \"static/media/km_advanced.6374f855.jpg\";","module.exports = __webpack_public_path__ + \"static/media/km_bodyfat.a1154379.jpg\";","module.exports = __webpack_public_path__ + \"static/media/km_faq.9d3cf20a.jpg\";","module.exports = __webpack_public_path__ + \"static/media/km_home.9319952f.jpg\";","module.exports = __webpack_public_path__ + \"static/media/km_intro.ed558da8.jpg\";","module.exports = __webpack_public_path__ + \"static/media/km_menu.c763ca0c.jpg\";","module.exports = __webpack_public_path__ + \"static/media/km_results.33e3de6e.jpg\";","module.exports = __webpack_public_path__ + \"static/media/metricmedia.2cfe23c1.jpg\";","module.exports = __webpack_public_path__ + \"static/media/metricmediaspeed.04739c90.jpg\";","module.exports = __webpack_public_path__ + \"static/media/mylifter.8a343d9d.jpg\";","module.exports = __webpack_public_path__ + \"static/media/phoenixstone.1154d83a.jpg\";","module.exports = __webpack_public_path__ + \"static/media/phoenixstone_speed.8b6a83b8.jpg\";","module.exports = __webpack_public_path__ + \"static/media/vanderhall.0c9dd0d9.jpg\";","import React, { useEffect, useState } from 'react';\r\nimport './App.scss';\r\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\r\nimport Slide from '@material-ui/core/Slide';\r\n\r\nimport Header from './Components/Library/Header';\r\nimport NavBar from './Components/Library/NavBar';\r\nimport LoadScreen from './Components/Library/LoadScreen';\r\n\r\nimport Home from './Components/Home/Home';\r\nimport HomeViewer from './Components/Home/Home.codeview';\r\nimport StockTwits from './Components/Stocktwits/Stocktwits';\r\nimport StockViewer from './Components/Stocktwits/StockTwits.codeview';\r\nimport XKCD from './Components/XKCD/xkcd';\r\nimport XKCDViewer from './Components/XKCD/xkcd.codeview';\r\nimport Portfolio from './Components/Portfolio/Portfolio';\r\nimport PortfolioViewer from './Components/Portfolio/Portfolio.codeview';\r\nimport Library from './Components/Library/Library';\r\nimport LibraryViewer from './Components/Library/Library.codeview';\r\nimport Portal from './Components/Library/Portal/Portal';\r\nimport PortalViewer from './Components/Library/Portal/Portal.codeview';\r\n\r\ninterface PageInterface {\r\n  text: string;\r\n  title: string;\r\n  route: string;\r\n  icon: string;\r\n  component: any;\r\n  codeView?: any;\r\n  exactRoute?: boolean;\r\n}\r\n\r\nconst App = () => {\r\n  const [navShow, setNavShow] = useState(false);\r\n  const [navShowClass, setNavShowClass] = useState('app app-without-menu');\r\n  const pages: PageInterface[] = [\r\n    {\r\n      text: 'Home',\r\n      title: 'Adair Daniels',\r\n      route: '/',\r\n      icon: 'home',\r\n      component: <Home />,\r\n      codeView: <HomeViewer />,\r\n      exactRoute: true,\r\n    },\r\n    {\r\n      text: 'PokeTable',\r\n      title: 'PokeTable',\r\n      route: '/poketable',\r\n      icon: 'table_view',\r\n      component: (\r\n        <Portal\r\n          url=\"https://andeleidun.github.io/pokeTable/\"\r\n          title=\"PokeTable\"\r\n        />\r\n      ),\r\n      codeView: <PortalViewer />,\r\n    },\r\n    {\r\n      text: 'StockTwits Feed',\r\n      title: 'StockTwits Feed',\r\n      route: '/stock',\r\n      icon: 'dvr',\r\n      component: <StockTwits />,\r\n      codeView: <StockViewer />,\r\n    },\r\n    {\r\n      text: 'XKCD Slideshow',\r\n      title: 'XKCD Slideshow',\r\n      route: '/xkcd',\r\n      icon: 'burst_mode',\r\n      component: <XKCD />,\r\n      codeView: <XKCDViewer />,\r\n    },\r\n    {\r\n      text: 'Portfolio',\r\n      title: 'Portfolio',\r\n      route: '/portfolio',\r\n      icon: 'compare',\r\n      component: <Portfolio />,\r\n      codeView: <PortfolioViewer />,\r\n    },\r\n    {\r\n      text: 'Library',\r\n      title: 'Library',\r\n      route: '/library',\r\n      icon: 'library_books',\r\n      component: <Library />,\r\n      codeView: <LibraryViewer />,\r\n    },\r\n  ];\r\n  const [currentPage, setCurrentPage] = useState(pages[0]);\r\n  const [codeView, setCodeView] = useState(false);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    if (loading) {\r\n      setLoading(false);\r\n    }\r\n  }, [loading]);\r\n\r\n  const toggleNav = () => {\r\n    if (navShow) {\r\n      setNavShowClass('app app-without-menu ');\r\n    } else {\r\n      setNavShowClass('app app-with-menu ');\r\n    }\r\n    setNavShow(!navShow);\r\n  };\r\n\r\n  const toggleCodeView = () => {\r\n    setCodeView(!codeView);\r\n  };\r\n\r\n  const navigate = (page: PageInterface) => {\r\n    setCurrentPage(page);\r\n  };\r\n\r\n  const generateOverlay = () => {\r\n    if (navShow) {\r\n      return <div className=\"app-overlay-mobile\" onClick={() => toggleNav()} />;\r\n    }\r\n  };\r\n\r\n  const generateComponent = () => {\r\n    let generatedContent: any[] = [];\r\n    for (let page of pages) {\r\n      let component: any;\r\n      if (codeView) {\r\n        component = page.codeView;\r\n      } else {\r\n        component = page.component;\r\n      }\r\n      generatedContent.push(\r\n        <Route\r\n          path={page.route}\r\n          exact={page.exactRoute}\r\n          key={page.title}\r\n          children={component}\r\n        />\r\n      );\r\n    }\r\n    return (\r\n      <Switch>\r\n        {generatedContent}\r\n        <Route path=\"/\" children={pages[0].component} key={0} />\r\n      </Switch>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <BrowserRouter basename={process ? process.env.PUBLIC_URL : ''}>\r\n      <div className={navShowClass}>\r\n        <Header\r\n          onClick={() => toggleNav()}\r\n          currentPage={currentPage}\r\n          codeView={codeView}\r\n          toggleCodeView={() => toggleCodeView()}\r\n        />\r\n        <Slide direction=\"right\" in={navShow} mountOnEnter unmountOnExit>\r\n          <div className=\"app-menu\">\r\n            <NavBar\r\n              pages={pages}\r\n              navClick={(page: PageInterface) => navigate(page)}\r\n              codeView={codeView}\r\n              toggleCodeView={() => toggleCodeView()}\r\n            />\r\n          </div>\r\n        </Slide>\r\n        {generateOverlay()}\r\n        <div className=\"app-main\">\r\n          {loading ? (\r\n            <LoadScreen />\r\n          ) : (\r\n            <div className=\"app-content\">{generateComponent()}</div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </BrowserRouter>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","/*\r\n  This page demonstrates React's strong capacity for generating content from provided data. \r\n  Aside from a singular primary 'main' component, no static content exists on this page.\r\n  Instead, all content is generated based upon the information in Home.json.\r\n  I used this strategy at HP, combined with retriving said data from an API (demonstrated in the XKCD page),\r\n  to progressively load and submit information for their B2B Printer Sales Contract System.\r\n  The kind of strong typing displayed in this page is extremely important for an enterprise platform.\r\n*/\r\nimport React, { useState, useEffect } from 'react';\r\nimport './Home.scss';\r\n\r\nimport CardTemplate from '../Library/Card';\r\nimport { headshot, ketomate, hp, nike } from '../../Resources/images/index';\r\nimport HomeData from './Home.json';\r\n\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Chip from '@material-ui/core/Chip';\r\nimport Button from '@material-ui/core/Button';\r\nimport Rating from '@material-ui/lab/Rating';\r\nimport Box from '@material-ui/core/Box';\r\n\r\ninterface Links {\r\n  url: string;\r\n  text: string;\r\n}\r\n\r\ninterface LinkSet {\r\n  url: string;\r\n  title: string;\r\n  img: string;\r\n  text: string;\r\n}\r\n\r\ninterface SkillSet {\r\n  title: string;\r\n  value: number;\r\n  text: string;\r\n}\r\n\r\ninterface Group {\r\n  classes?: string;\r\n  title?: string;\r\n  dates?: string;\r\n  description?: string;\r\n  jobTitle?: string;\r\n  text?: string;\r\n  skills?: string[];\r\n}\r\n\r\ninterface GroupSet {\r\n  group: Group[];\r\n}\r\n\r\ninterface Content {\r\n  text?: string;\r\n  linkset?: LinkSet;\r\n  skillset?: SkillSet;\r\n  groupSet?: GroupSet[];\r\n}\r\n\r\ninterface CardContent {\r\n  title: string;\r\n  media: string;\r\n  content: Content[];\r\n  links?: string | Links[];\r\n  classes: string;\r\n}\r\n\r\n/* \r\n  This interface is the combination of all types above, checking for specifically\r\n  known data to be present, as well as requring that any unknown data follow\r\n  the CardContent format.\r\n*/\r\ninterface DataSet {\r\n  career: CardContent;\r\n  highlights: CardContent;\r\n  skills: CardContent;\r\n  experience: CardContent;\r\n  education: CardContent;\r\n  [paramName: string]: CardContent;\r\n}\r\n\r\nconst Home = () => {\r\n  const [experienceIndex, setExperienceIndex] = useState(0);\r\n  const [educationIndex, setEducationIndex] = useState(0);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  const homeData: DataSet = HomeData.homeData;\r\n  let experienceLength: number = 0;\r\n  let educationLength: number = 0;\r\n\r\n  useEffect(() => {\r\n    if (loading) {\r\n      setLoading(false);\r\n    }\r\n  }, [loading]);\r\n\r\n  /* \r\n      This function demonstrates handling multiple navigable elements for a single\r\n      view with a single function.\r\n    */\r\n\r\n  const navigate = (input: string, title: string) => {\r\n    const step: number = 1;\r\n    const baseIndex: number = 0;\r\n    let newState: number = 1;\r\n    let operation: string = input + title;\r\n\r\n    switch (operation) {\r\n      case 'previousExperience':\r\n        newState = experienceIndex - step;\r\n        if (newState < baseIndex) {\r\n          newState = experienceLength;\r\n        }\r\n        setExperienceIndex(newState);\r\n        break;\r\n      case 'previousEducation':\r\n        newState = educationIndex - step;\r\n        if (newState < baseIndex) {\r\n          newState = educationLength;\r\n        }\r\n        setEducationIndex(newState);\r\n        break;\r\n      case 'nextExperience':\r\n        newState = experienceIndex + step;\r\n        if (newState > experienceLength) {\r\n          newState = baseIndex;\r\n        }\r\n        setExperienceIndex(newState);\r\n        break;\r\n      case 'nextEducation':\r\n        newState = educationIndex + step;\r\n        if (newState > educationLength) {\r\n          newState = baseIndex;\r\n        }\r\n        setEducationIndex(newState);\r\n        break;\r\n      default:\r\n        console.log('Navigation error.');\r\n    }\r\n  };\r\n\r\n  /* \r\n      This function generates content for specifically an array of type GroupSet.\r\n      This is a good example of factoring out a function for a specific task.\r\n    */\r\n\r\n  const generateGroupSet = (groupSet: GroupSet[]) => {\r\n    let groupSetContent: any[] = [];\r\n    for (let group of groupSet) {\r\n      let groupContent: any[] = [];\r\n      let groupClass: string = '';\r\n      for (let item of group.group) {\r\n        if (item.title) {\r\n          groupContent.push(\r\n            <div className=\"title\">\r\n              <h3>{item.title}</h3>\r\n            </div>\r\n          );\r\n        }\r\n        if (item.dates) {\r\n          groupContent.push(\r\n            <ListItem key={item.dates} className=\"dates\">\r\n              <ListItemText primary={item.dates} />\r\n            </ListItem>\r\n          );\r\n        }\r\n        if (item.classes) {\r\n          groupClass = item.classes;\r\n        }\r\n        if (item.description) {\r\n          groupContent.push(\r\n            <ListItem key={item.description} className=\"description\">\r\n              <ListItemText primary={item.description} />\r\n            </ListItem>\r\n          );\r\n        }\r\n        if (item.jobTitle) {\r\n          groupContent.push(\r\n            <ListItem key={item.jobTitle} className=\"job-title\">\r\n              <ListItemText primary={item.jobTitle} />\r\n            </ListItem>\r\n          );\r\n        }\r\n        if (item.text) {\r\n          groupContent.push(\r\n            <ListItem key={item.text} className=\"group-text\">\r\n              <ListItemIcon>\r\n                <span className=\"material-icons\">layers</span>\r\n              </ListItemIcon>\r\n              <ListItemText primary={item.text} />\r\n            </ListItem>\r\n          );\r\n        }\r\n        if (item.skills) {\r\n          let skills: any[] = [];\r\n          for (let skill of item.skills) {\r\n            skills.push(<Chip size=\"small\" label={skill} className=\"skill\" />);\r\n          }\r\n          groupContent.push(<div className=\"skills\">{skills}</div>);\r\n        }\r\n      }\r\n      groupSetContent.push(<div className={groupClass}>{groupContent}</div>);\r\n    }\r\n    return groupSetContent;\r\n  };\r\n\r\n  /* \r\n      This function handles specifically the generation of content for the inside\r\n      of the cards within the page.\r\n    */\r\n  const formatContent = (contentSet: CardContent) => {\r\n    let formattedContent: any[] = [];\r\n    let title: string = contentSet.title;\r\n    let contentGroup: any[] = contentSet.content;\r\n    for (let content of contentGroup) {\r\n      if (content.title) {\r\n        formattedContent.push(<h3>{title}</h3>);\r\n      }\r\n      if (content.linkset) {\r\n        const imageSet = {\r\n          ketomate,\r\n          hp,\r\n          nike,\r\n        };\r\n        const image = imageSet[content.linkset.img];\r\n        formattedContent.push(\r\n          <ListItem key={content.linkset.title} className=\"linkset\">\r\n            <a\r\n              href={content.linkset.url}\r\n              target=\"_blank\"\r\n              rel=\"noopener noreferrer\"\r\n            >\r\n              <div>\r\n                <img src={image} alt={content.linkset.title} />\r\n                <h3>{content.linkset.title}</h3>\r\n              </div>\r\n            </a>\r\n            <p>{content.linkset.text}</p>\r\n          </ListItem>\r\n        );\r\n      }\r\n      if (content.skillset) {\r\n        formattedContent.push(\r\n          <Box component=\"fieldset\" mb={3} borderColor=\"transparent\">\r\n            <h3>{content.skillset.title}</h3>\r\n            <Rating name=\"read-only\" value={content.skillset.value} readOnly />\r\n            <p>{content.skillset.text}</p>\r\n          </Box>\r\n        );\r\n      }\r\n      if (content.groupSet) {\r\n        let generatedGroupSet: any[];\r\n        let groupSetLength: number = 0;\r\n        let groupSetContent: any;\r\n        let previousIcon = (\r\n          <span className=\"material-icons\">navigate_before</span>\r\n        );\r\n        let nextIcon = <span className=\"material-icons\">navigate_next</span>;\r\n        generatedGroupSet = generateGroupSet(content.groupSet);\r\n        groupSetLength = generatedGroupSet.length;\r\n        if (title === 'Experience') {\r\n          experienceLength = groupSetLength - 1;\r\n          groupSetContent = generatedGroupSet[experienceIndex];\r\n        }\r\n        if (title === 'Education') {\r\n          educationLength = groupSetLength - 1;\r\n          groupSetContent = generatedGroupSet[educationIndex];\r\n        }\r\n        formattedContent.push(\r\n          <div className=\"group-set\">\r\n            <div className=\"group-set-content\">{groupSetContent}</div>\r\n            <div className=\"group-set-nav\">\r\n              <div>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  startIcon={previousIcon}\r\n                  onClick={() => navigate('previous', title)}\r\n                >\r\n                  Previous\r\n                </Button>\r\n              </div>\r\n              <div>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  endIcon={nextIcon}\r\n                  onClick={() => navigate('next', title)}\r\n                >\r\n                  Next\r\n                </Button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        );\r\n      }\r\n      if (content.text) {\r\n        formattedContent.push(\r\n          <ListItem key={content.text}>\r\n            <ListItemText primary={content.text} />\r\n          </ListItem>\r\n        );\r\n      }\r\n    }\r\n    return <List>{formattedContent}</List>;\r\n  };\r\n\r\n  /* \r\n    This function handles the generation of cards on this page, as well as\r\n    through factored out functions the generation of all content inside\r\n    the cards, leaving it the sole function called to create content\r\n    on an otherwise empty page.\r\n  */\r\n  const generateContent = () => {\r\n    let contentArray: any[] = [];\r\n    let formattedArray: any[] = [];\r\n    for (let value of Object.values(homeData)) {\r\n      contentArray.push(value);\r\n    }\r\n    for (let content of contentArray) {\r\n      let media: any;\r\n      switch (content.media) {\r\n        case 'headshot':\r\n          media = headshot;\r\n          break;\r\n        default:\r\n          media = null;\r\n          break;\r\n      }\r\n      formattedArray.push(\r\n        <CardTemplate\r\n          title={content.title}\r\n          img={media}\r\n          content={formatContent(content)}\r\n          classGiven={content.classes}\r\n          links={content.links}\r\n        />\r\n      );\r\n    }\r\n    return formattedArray;\r\n  };\r\n\r\n  return <main className=\"app-home\">{generateContent()}</main>;\r\n};\r\n\r\nexport default Home;\r\n","import React, { useState } from 'react';\r\n\r\nimport Viewer from 'react-code-viewer';\r\nimport { highlight, languages } from 'prismjs/components/prism-core';\r\nimport 'prismjs/components/prism-clike';\r\nimport 'prismjs/components/prism-javascript';\r\nimport 'prismjs/components/prism-markup';\r\nimport '../Library/CodeView.css';\r\nimport CardTemplate from '../Library/Card';\r\n\r\n/* eslint import/no-webpack-loader-syntax: off */\r\nconst homeCode = require('!!raw-loader!./Home').default;\r\n\r\nrequire('prismjs/components/prism-jsx');\r\n\r\nconst HomeViewer = () => {\r\n  const viewer = (\r\n    <Viewer\r\n      value={homeCode}\r\n      highlight={(value) => highlight(value, languages.js)}\r\n      padding={10}\r\n      style={{\r\n        fontFamily: '\"Fira code\", \"Fira Mono\", monospace',\r\n        fontSize: 12,\r\n      }}\r\n    />\r\n  );\r\n  return (\r\n    <main className=\"app-code-viewer\">\r\n      <CardTemplate content={viewer} classGiven=\"card\" />\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default HomeViewer;\r\n","/*\r\n  This page is another example of consuming a RESTful API, this time\r\n  from the StockTwits API. The received information is rendered \r\n  using the CardTemplate component from the library, and can be\r\n  filtered by clicking on the stock symbol chips.\r\n*/\r\n\r\nimport React from 'react';\r\nimport './StockTwits.scss';\r\n\r\nimport CardTemplate from '../Library/Card';\r\n\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport Chip from '@material-ui/core/Chip';\r\nimport Badge from '@material-ui/core/Badge';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\ninterface Props {}\r\n\r\ninterface State {\r\n  symbols: any[];\r\n  input: string;\r\n  error: string;\r\n  interval: any;\r\n  currentCount: number;\r\n  filter: any[];\r\n  loading: boolean;\r\n}\r\n\r\nclass StockTwits extends React.Component<Props, State> {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      symbols: [],\r\n      input: '',\r\n      error: '',\r\n      interval: undefined,\r\n      currentCount: 5,\r\n      filter: [],\r\n      loading: false,\r\n    };\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.timer = this.timer.bind(this);\r\n  }\r\n\r\n  chips: any[] = [];\r\n  tweets: any[] = [];\r\n  content: any;\r\n\r\n  renderChips(symbols: any[]) {\r\n    let chips: any[] = [];\r\n    for (let symbol of symbols) {\r\n      if (symbol.tweets) {\r\n        let chipClass = 'chip';\r\n        if (this.state.filter.includes(symbol.key)) {\r\n          chipClass = 'chip active-chip';\r\n        }\r\n        chips.push(\r\n          <Badge badgeContent={symbol.tweets.length} className=\"badge\">\r\n            <Chip\r\n              label={symbol.label}\r\n              className={chipClass}\r\n              key={symbol.key}\r\n              onClick={() => this.chipClick(symbol)}\r\n            />\r\n          </Badge>\r\n        );\r\n      }\r\n      this.chips = chips;\r\n    }\r\n  }\r\n\r\n  setTimer() {\r\n    let intervalId = setInterval(this.timer, 60000);\r\n    this.setState({\r\n      interval: intervalId,\r\n      currentCount: 5,\r\n    });\r\n  }\r\n\r\n  timer() {\r\n    let newCount = this.state.currentCount - 1;\r\n    if (newCount >= 0) {\r\n      this.setState({ currentCount: newCount });\r\n    } else {\r\n      this.submitRequest();\r\n      clearInterval(this.state.interval);\r\n      this.setTimer();\r\n    }\r\n  }\r\n\r\n  renderTweets(symbols: any[]) {\r\n    let tweets: any[] = [];\r\n    let tweetsFound = 0;\r\n    for (let symbol of symbols) {\r\n      if (symbol.tweets) {\r\n        tweetsFound++;\r\n        for (const [index, tweet] of symbol.tweets.entries()) {\r\n          let message = (\r\n            <div key={tweet.user.username + index}>\r\n              <figure className=\"picture\">\r\n                <img\r\n                  src={tweet.user.avatar_url_ssl}\r\n                  alt={tweet.user.username}\r\n                />\r\n              </figure>\r\n              <p className=\"namearea\">\r\n                <span className=\"name\">{tweet.user.name}</span>{' '}\r\n                <span className=\"username\">@ {tweet.user.username}</span>\r\n              </p>\r\n              <p className=\"text\">{tweet.body}</p>\r\n            </div>\r\n          );\r\n          tweets.push(\r\n            <CardTemplate content={message} key={index} classGiven=\"card\" />\r\n          );\r\n        }\r\n      }\r\n    }\r\n    if (tweetsFound > 0) {\r\n      this.setTimer();\r\n    }\r\n    this.tweets = tweets;\r\n  }\r\n\r\n  chipClick(symbol: any) {\r\n    let filter: any[] = this.state.filter;\r\n    let symbols: any[] = this.state.symbols;\r\n    let filteredSymbols: any[] = [];\r\n    if (filter.includes(symbol.key)) {\r\n      let position = filter.indexOf(symbol.key);\r\n      filter.splice(position, 1);\r\n      if (filter.length === 0) {\r\n        this.setState({ filter });\r\n        clearInterval(this.state.interval);\r\n        this.renderTweets(symbols);\r\n        this.renderChips(symbols);\r\n        return;\r\n      }\r\n    } else {\r\n      filter.push(symbol.key);\r\n    }\r\n    for (let member of filter) {\r\n      for (let symbol of symbols) {\r\n        if (symbol.key === member) {\r\n          filteredSymbols.push(symbol);\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    this.setState({ filter });\r\n    clearInterval(this.state.interval);\r\n    this.renderTweets(filteredSymbols);\r\n    this.renderChips(symbols);\r\n  }\r\n\r\n  async retrieveTweets(symbols: any[]) {\r\n    /* Retrieves images from StockTwits using open cors-anywhere proxy */\r\n    this.setState({ loading: true });\r\n    const proxyUrl = 'https://thingproxy.freeboard.io/fetch/';\r\n    const urlBase = 'https://api.stocktwits.com/api/2/streams/symbol/';\r\n    const urlEnd = '.json';\r\n    const proxiedRequest = (url, options = { headers: {} }) =>\r\n      fetch(url, {\r\n        ...options,\r\n        headers: {\r\n          ...options.headers,\r\n          'X-Requested-With': 'stock-twits-live-feed',\r\n        },\r\n      })\r\n        .then((res) => res.json())\r\n        .catch((error) => this.setState({ error: error }));\r\n    for (let symbol of symbols) {\r\n      const useUrl = urlBase.concat(symbol.label).concat(urlEnd);\r\n      const finalUrl = proxyUrl.concat(useUrl);\r\n      await proxiedRequest(finalUrl)\r\n        .then((data) => {\r\n          symbol.tweets = data.messages;\r\n        })\r\n        .catch((error) => this.setState({ error: error }));\r\n    }\r\n    if (!this.state.error && symbols[0].tweets) {\r\n      this.renderChips(symbols);\r\n      this.renderTweets(symbols);\r\n    }\r\n    this.setState({ loading: false });\r\n    return symbols;\r\n  }\r\n\r\n  async submitRequest() {\r\n    const newSymbols = this.state.input\r\n      .toUpperCase()\r\n      .replace(/\\s+/g, '')\r\n      .split(',');\r\n    let formattedSymbols: any[] = [];\r\n    let key: number = 0;\r\n    for (let symbol of newSymbols) {\r\n      formattedSymbols.push({ key: key, label: symbol, tweets: null });\r\n      key++;\r\n    }\r\n    formattedSymbols = await this.retrieveTweets(formattedSymbols);\r\n    this.setState({ symbols: formattedSymbols });\r\n  }\r\n\r\n  handleChange(event: any) {\r\n    this.setState({ input: event.target.value });\r\n  }\r\n\r\n  handleSubmit(event: any) {\r\n    this.submitRequest();\r\n    event.preventDefault();\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.state.interval);\r\n  }\r\n\r\n  render() {\r\n    if (this.state.loading) {\r\n      this.content = <CircularProgress />;\r\n    } else if (this.state.error) {\r\n      this.content = <p>{this.state.error}</p>;\r\n    } else if (this.tweets[0]) {\r\n      this.content = (\r\n        <section className=\"content\">\r\n          <section className=\"chips\">{this.chips}</section>\r\n          <section className=\"tweets\">{this.tweets}</section>\r\n        </section>\r\n      );\r\n    } else {\r\n      this.content = null;\r\n    }\r\n    return (\r\n      <main className=\"app-stocktwits\">\r\n        <section className=\"search\">\r\n          <form>\r\n            <TextField\r\n              className=\"stock-input\"\r\n              id=\"stock-symbols\"\r\n              label=\"Input stock symbols (separate with a comma)\"\r\n              value={this.state.input}\r\n              onChange={this.handleChange}\r\n              InputProps={{\r\n                startAdornment: (\r\n                  <InputAdornment position=\"start\">$</InputAdornment>\r\n                ),\r\n              }}\r\n            />\r\n            <br />\r\n            <Button\r\n              className=\"search-button\"\r\n              variant=\"contained\"\r\n              onClick={this.handleSubmit}\r\n            >\r\n              Search\r\n            </Button>\r\n          </form>\r\n        </section>\r\n        {this.content}\r\n      </main>\r\n    );\r\n  }\r\n}\r\n\r\nexport default StockTwits;\r\n","import React from 'react';\r\n\r\nimport Viewer from 'react-code-viewer';\r\nimport { highlight, languages } from 'prismjs/components/prism-core';\r\nimport 'prismjs/components/prism-clike';\r\nimport 'prismjs/components/prism-javascript';\r\nimport 'prismjs/components/prism-markup';\r\nimport '../Library/CodeView.css';\r\n\r\nimport CardTemplate from '../Library/Card';\r\n\r\nrequire('prismjs/components/prism-jsx');\r\n\r\n/* eslint import/no-webpack-loader-syntax: off */\r\nconst StockViewCode = require('!!raw-loader!./Stocktwits').default;\r\n\r\nclass StockViewer extends React.Component {\r\n  render() {\r\n    let viewer = (\r\n      <Viewer\r\n        value={StockViewCode}\r\n        highlight={(code) => highlight(code, languages.js)}\r\n        padding={10}\r\n        style={{\r\n          fontFamily: '\"Fira code\", \"Fira Mono\", monospace',\r\n          fontSize: 12,\r\n        }}\r\n      />\r\n    );\r\n    return (\r\n      <main className=\"app-code-viewer\">\r\n        <CardTemplate content={viewer} classGiven=\"card\" />\r\n      </main>\r\n    );\r\n  }\r\n}\r\n\r\nexport default StockViewer;\r\n","/*\r\n  This page demonstrates React's ability to consume RESTful APIs in real time.\r\n  Of particular use and note, is that the react page loads, and then sends a \r\n  request for content that is able to be live loaded into the page without\r\n  a refresh. It is also a good example of abstraction in React, where multiple\r\n  components are defined within this component, segmented by function.\r\n*/\r\nimport React from 'react';\r\nimport './xkcd.css';\r\nimport { reactLogo } from '../../Resources/images/index';\r\n\r\nimport CardTemplate from '../Library/Card';\r\n\r\ninterface Props {\r\n  img?: any;\r\n  onClick?: any;\r\n  className?: any;\r\n}\r\n\r\ninterface State {\r\n  images?: any;\r\n  index: number;\r\n  initialIndex: number;\r\n  finalIndex: number;\r\n  loading: boolean;\r\n}\r\n\r\nclass Panel extends React.Component<Props> {\r\n  panelTitle = this.props.img.title;\r\n  panelSrc = this.props.img.img;\r\n  panelAlt = this.props.img.alt;\r\n  panelFigure = (\r\n    <figure>\r\n      <img src={this.panelSrc} alt={this.panelAlt} />\r\n    </figure>\r\n  );\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <CardTemplate\r\n          title={this.panelTitle}\r\n          content={this.panelFigure}\r\n          classGiven=\"card panel-card\"\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass NavBar extends React.Component<Props> {\r\n  render() {\r\n    return (\r\n      <nav>\r\n        <button onClick={() => this.props.onClick('first')}>First</button>\r\n        <button onClick={() => this.props.onClick('previous')}>Previous</button>\r\n        <button onClick={() => this.props.onClick('next')}>Next</button>\r\n        <button onClick={() => this.props.onClick('last')}>Last</button>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\n\r\nclass XKCD extends React.Component<Props, State> {\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.state = {\r\n      images: Array(3).fill(''),\r\n      index: 1,\r\n      initialIndex: 1,\r\n      finalIndex: 0,\r\n      loading: true,\r\n    };\r\n  }\r\n\r\n  async retrieveImages(index: any) {\r\n    /* Retrieves images from XKCD using open cors-anywhere proxy */\r\n    this.setState({ loading: true });\r\n    this.setState({ images: Array(3).fill(null) });\r\n    const proxyUrl = 'https://thingproxy.freeboard.io/fetch/';\r\n    const urlBase = 'http://xkcd.com/';\r\n    const urlEnd = '/info.0.json';\r\n    const currentUrl = 'http://xkcd.com/info.0.json';\r\n    let currentIndex = index;\r\n    const urlArray: any[] = [];\r\n    for (let i = 0; i < 3; i++) {\r\n      const createUrl = urlBase.concat(currentIndex).concat(urlEnd);\r\n      urlArray.push(createUrl);\r\n      currentIndex++;\r\n    }\r\n    const proxiedRequest = (url: string, options = { headers: {} }) =>\r\n      fetch(url, {\r\n        ...options,\r\n        headers: {\r\n          ...options.headers,\r\n          'X-Requested-With': 'xkcd-slideshow',\r\n        },\r\n      })\r\n        .then((res) => res.json())\r\n        .catch((error) => console.error(error));\r\n    if (this.state.finalIndex === 0) {\r\n      const finalUrl = proxyUrl.concat(currentUrl);\r\n      await proxiedRequest(finalUrl)\r\n        .then((data) => {\r\n          const finalPlaceholder = data.num - 2;\r\n          this.setState({ finalIndex: finalPlaceholder });\r\n        })\r\n        .catch((error) => console.error(error));\r\n    }\r\n    const dataArray: any[] = [];\r\n    for (const useUrl of urlArray) {\r\n      const finalUrl = proxyUrl.concat(useUrl);\r\n      await proxiedRequest(finalUrl)\r\n        .then((data: any) => {\r\n          dataArray.push(data);\r\n        })\r\n        .catch((error) => console.error(error));\r\n    }\r\n    this.setState({ images: dataArray });\r\n    this.setState({ loading: false });\r\n  }\r\n\r\n  renderPanels(i: number) {\r\n    return <Panel img={this.state.images[i]} className=\"panel\" />;\r\n  }\r\n\r\n  navigate(input: string) {\r\n    const step = 3;\r\n    let newState = 1;\r\n    switch (input) {\r\n      case 'first':\r\n        newState = this.state.initialIndex;\r\n        break;\r\n      case 'previous':\r\n        newState = this.state.index - step;\r\n        if (newState < this.state.initialIndex) {\r\n          newState = this.state.initialIndex;\r\n        }\r\n        break;\r\n      case 'next':\r\n        newState = this.state.index + step;\r\n        if (newState > this.state.finalIndex) {\r\n          newState = this.state.finalIndex;\r\n        }\r\n        break;\r\n      case 'last':\r\n        newState = this.state.finalIndex;\r\n        break;\r\n      default:\r\n        console.log('Navigation error.');\r\n    }\r\n    this.retrieveImages(newState);\r\n    this.setState({ index: newState });\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.retrieveImages(this.state.index);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"xkcd\">\r\n        {this.state.loading ? (\r\n          <img src={reactLogo} className=\"loading-logo\" alt=\"logo\" />\r\n        ) : this.state.images[0] ? (\r\n          <main className=\"slideshow\">\r\n            {this.renderPanels(0)}\r\n            {this.renderPanels(1)}\r\n            {this.renderPanels(2)}\r\n          </main>\r\n        ) : (\r\n          <p>Loading error</p>\r\n        )}\r\n        <footer className=\"xkcd-footer\">\r\n          <NavBar onClick={(i: string) => this.navigate(i)} />\r\n          <section className=\"credit\">\r\n            <p>\r\n              Sincere thanks to{' '}\r\n              <a href=\"https://xkcd.com\">Randlal Munroe over at XKCD</a> for\r\n              making such an awesome webcomic.\r\n            </p>\r\n          </section>\r\n        </footer>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default XKCD;\r\n","import React from 'react';\r\n\r\nimport Viewer from 'react-code-viewer';\r\nimport { highlight, languages } from 'prismjs/components/prism-core';\r\nimport 'prismjs/components/prism-clike';\r\nimport 'prismjs/components/prism-javascript';\r\nimport 'prismjs/components/prism-markup';\r\nimport '../Library/CodeView.css';\r\n\r\nimport CardTemplate from '../Library/Card';\r\n\r\nrequire('prismjs/components/prism-jsx');\r\n\r\n/* eslint import/no-webpack-loader-syntax: off */\r\nconst XKCDCode = require('!!raw-loader!./xkcd').default;\r\n\r\nclass XKCDViewer extends React.Component {\r\n  render() {\r\n    let viewer = (\r\n      <Viewer\r\n        value={XKCDCode}\r\n        highlight={(code) => highlight(code, languages.js)}\r\n        padding={10}\r\n        style={{\r\n          fontFamily: '\"Fira code\", \"Fira Mono\", monospace',\r\n          fontSize: 12,\r\n        }}\r\n      />\r\n    );\r\n    return (\r\n      <main className=\"app-code-viewer\">\r\n        <CardTemplate content={viewer} classGiven=\"card\" />\r\n      </main>\r\n    );\r\n  }\r\n}\r\n\r\nexport default XKCDViewer;\r\n","/*\r\n    This page shows the strength available in React's component\r\n    libraries such as Material UI and React-Swipeable-Views,\r\n    which carry strong functionality encompassed in a single\r\n    importable component.\r\n*/\r\nimport React from 'react';\r\nimport './Portfolio.scss';\r\n\r\nimport CardTemplate from '../Library/Card';\r\n\r\nimport \r\n    {\r\n        agechart,\r\n        experiencechart,\r\n        genderchart,\r\n        ketomate10k,\r\n        kmactive,\r\n        kmadvanced,\r\n        kmbodyfat,\r\n        kmfaq,\r\n        kmhome,\r\n        kmintro,\r\n        kmresults,\r\n        metricmedia,\r\n        metricmediaspeed,\r\n        mylifter,\r\n        phoenixstone,\r\n        phoenixstonespeed,\r\n        vanderhall\r\n    } from '../../Resources/images/index';\r\n\r\nimport SwipeableViews from 'react-swipeable-views';\r\nimport { autoPlay } from 'react-swipeable-views-utils';\r\nimport MobileStepper from '@material-ui/core/MobileStepper';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nconst AutoPlaySwipeableViews = autoPlay(SwipeableViews);\r\n\r\ninterface Props {};\r\n\r\ninterface State {\r\n    activeSlide: number;\r\n    loading: boolean;\r\n};\r\n\r\ninterface PortfolioSlides {\r\n    title: string;\r\n    img: any;\r\n    label: string;\r\n}\r\n\r\nclass Portfolio extends React.Component <Props, State> {\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n          activeSlide: 0,\r\n          loading: true,\r\n        };\r\n      }\r\n\r\n    portfolioSlides:PortfolioSlides[] = [\r\n        {\r\n            title: 'Keto Mate - Home, Angular and Ionic App',\r\n            img: kmhome,\r\n            label: \"Screenshot of Keto Mate's home screen. Keto Mate is a diet tool built using Angular and Ionic to create a hybrid mobile app with native functionality.\"\r\n        },\r\n        {\r\n            title: 'Keto Mate - Store Listing',\r\n            img: ketomate10k,\r\n            label: \"Screenshot of Keto Mate's store listing.\"\r\n        },\r\n        {\r\n            title: 'Keto Mate - Active',\r\n            img: kmactive,\r\n            label: \"Screenshot of Keto Mate's activity selection screen\"\r\n        },\r\n        {\r\n            title: 'Keto Mate - Results',\r\n            img: kmresults,\r\n            label: \"Screenshot of Keto Mate's results screen.\"\r\n        },\r\n        {\r\n            title: 'Keto Mate - Advanced',\r\n            img: kmadvanced,\r\n            label: \"Screenshot of Keto Mate's advanced calculator, which can accept values such as IDEE from a doctor.\"\r\n        },\r\n        {\r\n            title: 'Keto Mate - Body Fat',\r\n            img: kmbodyfat,\r\n            label: \"Screenshot of Keto Mate's body fat calculator, which uses the US Navy method.\"\r\n        },\r\n        {\r\n            title: 'Keto Mate - FAQ',\r\n            img: kmfaq,\r\n            label: \"Screenshot of Keto Mate's FAQ, which answers frequently asked questions about the keto diet.\"\r\n        },\r\n        {\r\n            title: 'Keto Mate - Intro',\r\n            img: kmintro,\r\n            label: \"Screenshot of Keto Mate's intro to the keto diet.\"\r\n        },\r\n        {\r\n            title: 'Age Chart - Metric Media, using PowerBI',\r\n            img: agechart,\r\n            label: 'PowerBI Chart showing the ages of users of Metric Media phone charging kiosks. PowerBI data was retrieved live from an Azure server.'\r\n        },\r\n        {\r\n            title: 'Experience Chart - Metric Media',\r\n            img: experiencechart,\r\n            label: 'PowerBI Chart showing the engagement level of users of Metric Media phone charging kiosks.'\r\n        },\r\n        {\r\n            title: 'Gender Chart - Metric Media',\r\n            img: genderchart,\r\n            label: 'PowerBI Chart showing the gender of users of Metric Media phone charging kiosks.'\r\n        },\r\n        {\r\n            title: 'Metric Media - Main Site',\r\n            img: metricmedia,\r\n            label: 'Main site for Metric Media.'\r\n        },\r\n        {\r\n            title: 'Metric Media - Speed Test',\r\n            img: metricmediaspeed,\r\n            label: 'Speed test for Metric Media main site.'\r\n        },\r\n        {\r\n            title: 'Phoenix Stone - eCommerce Site',\r\n            img: phoenixstone,\r\n            label: 'eCommerce platform for artist Lady Phoenix Stone, using tools like WooCommerce, a custom ordering tool, and an instagram feed.'\r\n        },\r\n        {\r\n            title: 'Phoenix Stone - Speed Test',\r\n            img: phoenixstonespeed,\r\n            label: 'Speed test for Lady Phoenix Stone eCommerce site.'\r\n        },\r\n        {\r\n            title: 'Vanderhall - eCommerce Site',\r\n            img: vanderhall,\r\n            label: 'eCommerce platform for Vanderhall auto maker, hosting an array of subdealer sites and customizable purchase options.'\r\n        },\r\n        {\r\n            title: 'MyLifter - eCommerce Site',\r\n            img: mylifter,\r\n            label: 'eCommerce platform for MyLifter garage tools.'\r\n        },\r\n    ]\r\n\r\n    portfolioDisplay() {\r\n        const maxSlides = this.portfolioSlides.length;\r\n\r\n        const handleNext = () => {\r\n            if (this.state.activeSlide === maxSlides - 1) {\r\n                this.setState({ activeSlide: 0});\r\n            } else {\r\n                this.setState({ activeSlide: this.state.activeSlide + 1});\r\n            }\r\n          };\r\n        \r\n        const handleBack = () => {\r\n            if (this.state.activeSlide === 0) {\r\n                this.setState({activeSlide: maxSlides - 1});\r\n            } else {\r\n                this.setState({ activeSlide: this.state.activeSlide - 1});\r\n            }\r\n        };\r\n    \r\n        const handleSlideChange = (slide) => {\r\n            this.setState({ activeSlide: slide});\r\n        };\r\n\r\n        let previousIcon = (\r\n            <span className=\"material-icons\">\r\n                navigate_before\r\n            </span>\r\n        );\r\n\r\n        let nextIcon = (\r\n            <span className=\"material-icons\">\r\n                navigate_next\r\n            </span>\r\n        );\r\n\r\n        return (\r\n            <div className=\"portfolio-display\">\r\n                <h3>\r\n                    {this.portfolioSlides[this.state.activeSlide].title}\r\n                </h3>\r\n                <AutoPlaySwipeableViews\r\n                    axis='x'\r\n                    index={this.state.activeSlide}\r\n                    onChangeIndex={handleSlideChange}\r\n                    interval={10000}\r\n                >\r\n                {this.portfolioSlides.map((slide) => (\r\n                    <div key={slide.label} className='slide'>\r\n                        <div className=\"slide-image\">\r\n                            <img src={slide.img} alt={slide.label} />\r\n                        </div>\r\n                        {slide.label}\r\n                    </div>\r\n                 ))}\r\n                </AutoPlaySwipeableViews>\r\n                <MobileStepper\r\n                    steps={maxSlides}\r\n                    position=\"static\"\r\n                    activeStep={this.state.activeSlide}\r\n                    backButton={\r\n                        <Button \r\n                            onClick={handleBack} \r\n                            variant=\"contained\"\r\n                            startIcon={previousIcon}\r\n                        >\r\n                        Previous\r\n                        </Button>\r\n                    }\r\n                    nextButton={\r\n                        <Button \r\n                            onClick={handleNext} \r\n                            variant=\"contained\"\r\n                            endIcon={nextIcon}\r\n                        >\r\n                        Next\r\n                        </Button>\r\n                    }\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <main className=\"app-portfolio\">\r\n            <CardTemplate\r\n                content={this.portfolioDisplay()}\r\n                classGiven=\"portfolio-card\"\r\n            />\r\n            </main>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Portfolio;\r\n","import React from 'react';\r\n\r\nimport Viewer from 'react-code-viewer';\r\nimport { highlight, languages } from 'prismjs/components/prism-core';\r\nimport 'prismjs/components/prism-clike';\r\nimport 'prismjs/components/prism-javascript';\r\nimport 'prismjs/components/prism-markup';\r\nimport '../Library/CodeView.css';\r\n\r\nimport CardTemplate from '../Library/Card';\r\n\r\nrequire('prismjs/components/prism-jsx');\r\n\r\ninterface Props {};\r\n\r\ninterface State {\r\n    code: string,\r\n    readonly: boolean\r\n};\r\n\r\nconst code = `\r\n/*\r\n    This page shows the strength available in React's component\r\n    libraries such as Material UI and React-Swipeable-Views,\r\n    which carry strong functionality encompassed in a single\r\n    importable component.\r\n*/\r\nimport React from 'react';\r\nimport './Portfolio.scss';\r\n\r\nimport CardTemplate from '../Library/Card';\r\n\r\nimport \r\n    {\r\n        agechart,\r\n        experiencechart,\r\n        genderchart,\r\n        ketomate10k,\r\n        kmactive,\r\n        kmadvanced,\r\n        kmbodyfat,\r\n        kmfaq,\r\n        kmhome,\r\n        kmintro,\r\n        kmresults,\r\n        metricmedia,\r\n        metricmediaspeed,\r\n        mylifter,\r\n        phoenixstone,\r\n        phoenixstonespeed,\r\n        vanderhall\r\n    } from '../../Resources/images/index';\r\n\r\nimport SwipeableViews from 'react-swipeable-views';\r\nimport { autoPlay } from 'react-swipeable-views-utils';\r\nimport MobileStepper from '@material-ui/core/MobileStepper';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nconst AutoPlaySwipeableViews = autoPlay(SwipeableViews);\r\n\r\ninterface Props {};\r\n\r\ninterface State {\r\n    activeSlide: number;\r\n    loading: boolean;\r\n};\r\n\r\ninterface PortfolioSlides {\r\n    title: string;\r\n    img: any;\r\n    label: string;\r\n}\r\n\r\nclass Portfolio extends React.Component <Props, State> {\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n          activeSlide: 0,\r\n          loading: true,\r\n        };\r\n      }\r\n\r\n    portfolioSlides:PortfolioSlides[] = [\r\n        {\r\n            title: 'Keto Mate - Home, Angular and Ionic App',\r\n            img: kmhome,\r\n            label: \"Screenshot of Keto Mate's home screen. Keto Mate is a diet tool built using Angular and Ionic to create a hybrid mobile app with native functionality.\"\r\n        },\r\n        {\r\n            title: 'Keto Mate - Store Listing',\r\n            img: ketomate10k,\r\n            label: \"Screenshot of Keto Mate's store listing.\"\r\n        },\r\n        {\r\n            title: 'Keto Mate - Active',\r\n            img: kmactive,\r\n            label: \"Screenshot of Keto Mate's activity selection screen\"\r\n        },\r\n        {\r\n            title: 'Keto Mate - Results',\r\n            img: kmresults,\r\n            label: \"Screenshot of Keto Mate's results screen.\"\r\n        },\r\n        {\r\n            title: 'Keto Mate - Advanced',\r\n            img: kmadvanced,\r\n            label: \"Screenshot of Keto Mate's advanced calculator, which can accept values such as IDEE from a doctor.\"\r\n        },\r\n        {\r\n            title: 'Keto Mate - Body Fat',\r\n            img: kmbodyfat,\r\n            label: \"Screenshot of Keto Mate's body fat calculator, which uses the US Navy method.\"\r\n        },\r\n        {\r\n            title: 'Keto Mate - FAQ',\r\n            img: kmfaq,\r\n            label: \"Screenshot of Keto Mate's FAQ, which answers frequently asked questions about the keto diet.\"\r\n        },\r\n        {\r\n            title: 'Keto Mate - Intro',\r\n            img: kmintro,\r\n            label: \"Screenshot of Keto Mate's intro to the keto diet.\"\r\n        },\r\n        {\r\n            title: 'Age Chart - Metric Media, using PowerBI',\r\n            img: agechart,\r\n            label: 'PowerBI Chart showing the ages of users of Metric Media phone charging kiosks. PowerBI data was retrieved live from an Azure server.'\r\n        },\r\n        {\r\n            title: 'Experience Chart - Metric Media',\r\n            img: experiencechart,\r\n            label: 'PowerBI Chart showing the engagement level of users of Metric Media phone charging kiosks.'\r\n        },\r\n        {\r\n            title: 'Gender Chart - Metric Media',\r\n            img: genderchart,\r\n            label: 'PowerBI Chart showing the gender of users of Metric Media phone charging kiosks.'\r\n        },\r\n        {\r\n            title: 'Metric Media - Main Site',\r\n            img: metricmedia,\r\n            label: 'Main site for Metric Media.'\r\n        },\r\n        {\r\n            title: 'Metric Media - Speed Test',\r\n            img: metricmediaspeed,\r\n            label: 'Speed test for Metric Media main site.'\r\n        },\r\n        {\r\n            title: 'Phoenix Stone - eCommerce Site',\r\n            img: phoenixstone,\r\n            label: 'eCommerce platform for artist Lady Phoenix Stone, using tools like WooCommerce, a custom ordering tool, and an instagram feed.'\r\n        },\r\n        {\r\n            title: 'Phoenix Stone - Speed Test',\r\n            img: phoenixstonespeed,\r\n            label: 'Speed test for Lady Phoenix Stone eCommerce site.'\r\n        },\r\n        {\r\n            title: 'Vanderhall - eCommerce Site',\r\n            img: vanderhall,\r\n            label: 'eCommerce platform for Vanderhall auto maker, hosting an array of subdealer sites and customizable purchase options.'\r\n        },\r\n        {\r\n            title: 'MyLifter - eCommerce Site',\r\n            img: mylifter,\r\n            label: 'eCommerce platform for MyLifter garage tools.'\r\n        },\r\n    ]\r\n\r\n    portfolioDisplay() {\r\n        const maxSlides = this.portfolioSlides.length;\r\n\r\n        const handleNext = () => {\r\n            if (this.state.activeSlide === maxSlides - 1) {\r\n                this.setState({ activeSlide: 0});\r\n            } else {\r\n                this.setState({ activeSlide: this.state.activeSlide + 1});\r\n            }\r\n          };\r\n        \r\n        const handleBack = () => {\r\n            if (this.state.activeSlide === 0) {\r\n                this.setState({activeSlide: maxSlides - 1});\r\n            } else {\r\n                this.setState({ activeSlide: this.state.activeSlide - 1});\r\n            }\r\n        };\r\n    \r\n        const handleSlideChange = (slide) => {\r\n            this.setState({ activeSlide: slide});\r\n        };\r\n\r\n        let previousIcon = (\r\n            <span className=\"material-icons\">\r\n                navigate_before\r\n            </span>\r\n        );\r\n\r\n        let nextIcon = (\r\n            <span className=\"material-icons\">\r\n                navigate_next\r\n            </span>\r\n        );\r\n\r\n        return (\r\n            <div className=\"portfolio-display\">\r\n                <h3>\r\n                    {this.portfolioSlides[this.state.activeSlide].title}\r\n                </h3>\r\n                <AutoPlaySwipeableViews\r\n                    axis='x'\r\n                    index={this.state.activeSlide}\r\n                    onChangeIndex={handleSlideChange}\r\n                    interval={10000}\r\n                >\r\n                {this.portfolioSlides.map((slide) => (\r\n                    <div key={slide.label} className='slide'>\r\n                        <div className=\"slide-image\">\r\n                            <img src={slide.img} alt={slide.label} />\r\n                        </div>\r\n                        {slide.label}\r\n                    </div>\r\n                 ))}\r\n                </AutoPlaySwipeableViews>\r\n                <MobileStepper\r\n                    steps={maxSlides}\r\n                    position=\"static\"\r\n                    activeStep={this.state.activeSlide}\r\n                    backButton={\r\n                        <Button \r\n                            onClick={handleBack} \r\n                            variant=\"contained\"\r\n                            startIcon={previousIcon}\r\n                        >\r\n                        Previous\r\n                        </Button>\r\n                    }\r\n                    nextButton={\r\n                        <Button \r\n                            onClick={handleNext} \r\n                            variant=\"contained\"\r\n                            endIcon={nextIcon}\r\n                        >\r\n                        Next\r\n                        </Button>\r\n                    }\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <main className=\"app-portfolio\">\r\n            <CardTemplate\r\n                content={this.portfolioDisplay()}\r\n                classGiven=\"portfolio-card\"\r\n            />\r\n            </main>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Portfolio;\r\n`\r\n\r\nclass PortfolioViewer extends React.Component <Props, State> {\r\n\r\n    state = {\r\n        code,\r\n        readonly: true,\r\n      };\r\n\r\n    render() {\r\n        let viewer = (\r\n            <Viewer\r\n                value={this.state.code}\r\n                highlight={code => highlight(code, languages.js)}\r\n                padding={10}\r\n                style={{\r\n                fontFamily: '\"Fira code\", \"Fira Mono\", monospace',\r\n                fontSize: 12,\r\n                }}\r\n            />);\r\n    return (\r\n        <main className=\"app-code-viewer\">\r\n            <CardTemplate\r\n                content={viewer}\r\n                classGiven=\"card\"\r\n            />\r\n        </main>\r\n    );\r\n    }\r\n}\r\n\r\nexport default PortfolioViewer;\r\n","import React, { useState } from 'react';\r\n\r\nimport Viewer from 'react-code-viewer';\r\nimport { highlight, languages } from 'prismjs/components/prism-core';\r\nimport 'prismjs/components/prism-clike';\r\nimport 'prismjs/components/prism-javascript';\r\nimport 'prismjs/components/prism-markup';\r\nimport './CodeView.css';\r\n\r\nimport CardTemplate from './Card/';\r\n\r\nrequire('prismjs/components/prism-jsx');\r\n\r\n/* eslint import/no-webpack-loader-syntax: off */\r\nconst LibraryCode = require('!!raw-loader!./Library').default;\r\n\r\nconst LibraryViewer = () => {\r\n  let viewer = (\r\n    <Viewer\r\n      value={LibraryCode}\r\n      highlight={(value) => highlight(value, languages.js)}\r\n      padding={10}\r\n      style={{\r\n        fontFamily: '\"Fira code\", \"Fira Mono\", monospace',\r\n        fontSize: 12,\r\n      }}\r\n    />\r\n  );\r\n  return (\r\n    <main className=\"app-code-viewer\">\r\n      <CardTemplate content={viewer} classGiven=\"card\" />\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default LibraryViewer;\r\n","/*\r\n  This component uses lazy loading iframes to setup a portal\r\n  for separately hosted micro-frontends. This is implemented \r\n  with the PokeTable.\r\n  PokeTable is a filterable and sortable React data table.\r\n  PokeTable code can be found on github -\r\n  https://github.com/Andeleidun/pokeTable\r\n*/\r\nimport React from 'react';\r\nimport './Portal.css';\r\n\r\ninterface Props {\r\n  url: string;\r\n  title: string;\r\n}\r\n\r\nconst Portal = ({ url, title }: Props) => {\r\n  return <iframe src={url} loading=\"lazy\" className=\"portal\" title={title} />;\r\n};\r\n\r\nexport default Portal;\r\n","import React, { useState } from 'react';\r\n\r\nimport Viewer from 'react-code-viewer';\r\nimport { highlight, languages } from 'prismjs/components/prism-core';\r\nimport 'prismjs/components/prism-clike';\r\nimport 'prismjs/components/prism-javascript';\r\nimport 'prismjs/components/prism-markup';\r\nimport '../CodeView.css';\r\n\r\nimport CardTemplate from '../Card';\r\n\r\nrequire('prismjs/components/prism-jsx');\r\n\r\n/* eslint import/no-webpack-loader-syntax: off */\r\nconst PortalCode = require('!!raw-loader!./Portal').default;\r\n\r\nconst PortalViewer = () => {\r\n  let viewer = (\r\n    <Viewer\r\n      value={PortalCode}\r\n      highlight={(value) => highlight(value, languages.js)}\r\n      padding={10}\r\n      style={{\r\n        fontFamily: '\"Fira code\", \"Fira Mono\", monospace',\r\n        fontSize: 12,\r\n      }}\r\n    />\r\n  );\r\n  return (\r\n    <main className=\"app-code-viewer\">\r\n      <CardTemplate content={viewer} classGiven=\"card\" />\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default PortalViewer;\r\n","/* eslint import/no-webpack-loader-syntax: off */\r\nconst AppCode = require('!!raw-loader!../../App').default;\r\n\r\nexport default AppCode;\r\n","/* eslint import/no-webpack-loader-syntax: off */\r\nconst CardCode = require('!!raw-loader!./Card').default;\r\n\r\nexport default CardCode;\r\n","/* eslint import/no-webpack-loader-syntax: off */\r\nconst HeaderCode = require('!!raw-loader!./Header').default;\r\n\r\nexport default HeaderCode;\r\n","/* eslint import/no-webpack-loader-syntax: off */\r\nconst NavBarCode = require('!!raw-loader!./NavBar').default;\r\n\r\nexport default NavBarCode;\r\n","import React, { useState } from 'react';\r\nimport './Library.scss';\r\n\r\nimport Viewer from 'react-code-viewer';\r\nimport { highlight, languages } from 'prismjs/components/prism-core';\r\nimport 'prismjs/components/prism-clike';\r\nimport 'prismjs/components/prism-javascript';\r\nimport 'prismjs/components/prism-markup';\r\nimport '../Library/CodeView.css';\r\nimport CardTemplate from './Card';\r\n\r\nimport AppCode from './App.codeview';\r\nimport CardCode from './Card/Card.codeview';\r\nimport HeaderCode from './Header/Header.codeview';\r\nimport NavBarCode from './NavBar/NavBar.codeview';\r\n\r\nrequire('prismjs/components/prism-jsx');\r\n\r\nconst Library = () => {\r\n  const components = [\r\n    { index: 0, title: 'App', code: AppCode },\r\n    { index: 1, title: 'Card', code: CardCode },\r\n    { index: 2, title: 'Header', code: HeaderCode },\r\n    { index: 3, title: 'Nav Bar', code: NavBarCode },\r\n  ];\r\n  const [codeState, setCodeState] = useState(components[0].code);\r\n\r\n  const navigate = (index: number) => {\r\n    setCodeState(components[index].code);\r\n  };\r\n\r\n  const links = [\r\n    { onClick: () => navigate(0), text: 'App' },\r\n    { onClick: () => navigate(1), text: 'Card' },\r\n    { onClick: () => navigate(2), text: 'Header' },\r\n    { onClick: () => navigate(3), text: 'Nav Bar' },\r\n  ];\r\n\r\n  const generateOptions = () => {\r\n    let generatedOptions: any[] = [];\r\n\r\n    generatedOptions.push(\r\n      <CardTemplate\r\n        title={'Library Navigation'}\r\n        links={links}\r\n        classGiven=\"card library-card\"\r\n      />\r\n    );\r\n    return generatedOptions;\r\n  };\r\n\r\n  const viewer = (\r\n    <Viewer\r\n      value={codeState}\r\n      highlight={(value) => highlight(value, languages.js)}\r\n      padding={10}\r\n      style={{\r\n        fontFamily: '\"Fira code\", \"Fira Mono\", monospace',\r\n        fontSize: 12,\r\n      }}\r\n    />\r\n  );\r\n\r\n  return (\r\n    <main className=\"library-page\">\r\n      {generateOptions()}\r\n      <CardTemplate content={viewer} classGiven=\"card\" />\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default Library;\r\n","import React from 'react';\r\n\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Switch from '@material-ui/core/Switch';\r\n\r\nconst Header = (props) => {\r\n  const handleChange = () => {\r\n    props.toggleCodeView();\r\n  };\r\n\r\n  const generateCodeView = () => {\r\n    if (props.currentPage.codeView) {\r\n      let codeViewBar: any = (\r\n        <div className=\"code-view-bar\">\r\n          <FormControlLabel\r\n            control={\r\n              <Switch\r\n                checked={props.codeView}\r\n                onChange={handleChange}\r\n                name=\"codeView\"\r\n              />\r\n            }\r\n            label=\"Code View\"\r\n          />\r\n        </div>\r\n      );\r\n      return codeViewBar;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <header className=\"app-header\">\r\n      <AppBar position=\"static\">\r\n        <IconButton\r\n          edge=\"start\"\r\n          aria-label=\"menu\"\r\n          className=\"menu-button\"\r\n          onClick={props.onClick}\r\n        >\r\n          <i className=\"material-icons\">menu</i>\r\n        </IconButton>\r\n        <Toolbar className=\"title-bar\">\r\n          <h1>{props.currentPage.title}</h1>\r\n        </Toolbar>\r\n        {generateCodeView()}\r\n      </AppBar>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import Header from './Header';\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Switch from '@material-ui/core/Switch';\r\n\r\nconst NavBar = (props) => {\r\n  const handleChange = () => {\r\n    props.toggleCodeView();\r\n  };\r\n\r\n  const populatePages = () => {\r\n    let populatedPages: any[] = [];\r\n    for (let page of props.pages) {\r\n      populatedPages.push(\r\n        <Link\r\n          to={page.route}\r\n          onClick={() => props.navClick(page)}\r\n          key={page.text}\r\n        >\r\n          <ListItem button>\r\n            <ListItemIcon>\r\n              <i className=\"material-icons\">{page.icon}</i>\r\n            </ListItemIcon>\r\n            <ListItemText primary={page.text} />\r\n          </ListItem>\r\n        </Link>\r\n      );\r\n    }\r\n    return populatedPages;\r\n  };\r\n\r\n  const populateOptions = () => {\r\n    let options: any[] = [\r\n      <ListItem className=\"code-view-bar\">\r\n        <FormControlLabel\r\n          control={\r\n            <Switch\r\n              checked={props.codeView}\r\n              onChange={handleChange}\r\n              name=\"codeView\"\r\n            />\r\n          }\r\n          label=\"Code View\"\r\n        />\r\n      </ListItem>,\r\n    ];\r\n    return options;\r\n  };\r\n\r\n  return (\r\n    <nav className=\"app-nav\">\r\n      <List>\r\n        {populatePages()}\r\n        {populateOptions()}\r\n      </List>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default NavBar;\r\n","import NavBar from './NavBar';\r\n\r\nexport default NavBar;\r\n","import React from 'react';\r\nimport { reactLogo } from '../../../Resources/images/index';\r\n\r\ninterface Props {}\r\n\r\nclass LoadScreen extends React.Component<Props> {\r\n  render() {\r\n    return (\r\n      <figure>\r\n        <img src={reactLogo} className=\"loading-logo\" alt=\"Loading Logo\" />\r\n      </figure>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LoadScreen;\r\n","import LoadScreen from './LoadScreen';\r\n\r\nexport default LoadScreen;\r\n","export default \"/*\\r\\n  This page demonstrates React's strong capacity for generating content from provided data. \\r\\n  Aside from a singular primary 'main' component, no static content exists on this page.\\r\\n  Instead, all content is generated based upon the information in Home.json.\\r\\n  I used this strategy at HP, combined with retriving said data from an API (demonstrated in the XKCD page),\\r\\n  to progressively load and submit information for their B2B Printer Sales Contract System.\\r\\n  The kind of strong typing displayed in this page is extremely important for an enterprise platform.\\r\\n*/\\r\\nimport React, { useState, useEffect } from 'react';\\r\\nimport './Home.scss';\\r\\n\\r\\nimport CardTemplate from '../Library/Card';\\r\\nimport { headshot, ketomate, hp, nike } from '../../Resources/images/index';\\r\\nimport HomeData from './Home.json';\\r\\n\\r\\nimport List from '@material-ui/core/List';\\r\\nimport ListItem from '@material-ui/core/ListItem';\\r\\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\\r\\nimport ListItemText from '@material-ui/core/ListItemText';\\r\\nimport Chip from '@material-ui/core/Chip';\\r\\nimport Button from '@material-ui/core/Button';\\r\\nimport Rating from '@material-ui/lab/Rating';\\r\\nimport Box from '@material-ui/core/Box';\\r\\n\\r\\ninterface Links {\\r\\n  url: string;\\r\\n  text: string;\\r\\n}\\r\\n\\r\\ninterface LinkSet {\\r\\n  url: string;\\r\\n  title: string;\\r\\n  img: string;\\r\\n  text: string;\\r\\n}\\r\\n\\r\\ninterface SkillSet {\\r\\n  title: string;\\r\\n  value: number;\\r\\n  text: string;\\r\\n}\\r\\n\\r\\ninterface Group {\\r\\n  classes?: string;\\r\\n  title?: string;\\r\\n  dates?: string;\\r\\n  description?: string;\\r\\n  jobTitle?: string;\\r\\n  text?: string;\\r\\n  skills?: string[];\\r\\n}\\r\\n\\r\\ninterface GroupSet {\\r\\n  group: Group[];\\r\\n}\\r\\n\\r\\ninterface Content {\\r\\n  text?: string;\\r\\n  linkset?: LinkSet;\\r\\n  skillset?: SkillSet;\\r\\n  groupSet?: GroupSet[];\\r\\n}\\r\\n\\r\\ninterface CardContent {\\r\\n  title: string;\\r\\n  media: string;\\r\\n  content: Content[];\\r\\n  links?: string | Links[];\\r\\n  classes: string;\\r\\n}\\r\\n\\r\\n/* \\r\\n  This interface is the combination of all types above, checking for specifically\\r\\n  known data to be present, as well as requring that any unknown data follow\\r\\n  the CardContent format.\\r\\n*/\\r\\ninterface DataSet {\\r\\n  career: CardContent;\\r\\n  highlights: CardContent;\\r\\n  skills: CardContent;\\r\\n  experience: CardContent;\\r\\n  education: CardContent;\\r\\n  [paramName: string]: CardContent;\\r\\n}\\r\\n\\r\\nconst Home = () => {\\r\\n  const [experienceIndex, setExperienceIndex] = useState(0);\\r\\n  const [educationIndex, setEducationIndex] = useState(0);\\r\\n  const [loading, setLoading] = useState(true);\\r\\n\\r\\n  const homeData: DataSet = HomeData.homeData;\\r\\n  let experienceLength: number = 0;\\r\\n  let educationLength: number = 0;\\r\\n\\r\\n  useEffect(() => {\\r\\n    if (loading) {\\r\\n      setLoading(false);\\r\\n    }\\r\\n  }, [loading]);\\r\\n\\r\\n  /* \\r\\n      This function demonstrates handling multiple navigable elements for a single\\r\\n      view with a single function.\\r\\n    */\\r\\n\\r\\n  const navigate = (input: string, title: string) => {\\r\\n    const step: number = 1;\\r\\n    const baseIndex: number = 0;\\r\\n    let newState: number = 1;\\r\\n    let operation: string = input + title;\\r\\n\\r\\n    switch (operation) {\\r\\n      case 'previousExperience':\\r\\n        newState = experienceIndex - step;\\r\\n        if (newState < baseIndex) {\\r\\n          newState = experienceLength;\\r\\n        }\\r\\n        setExperienceIndex(newState);\\r\\n        break;\\r\\n      case 'previousEducation':\\r\\n        newState = educationIndex - step;\\r\\n        if (newState < baseIndex) {\\r\\n          newState = educationLength;\\r\\n        }\\r\\n        setEducationIndex(newState);\\r\\n        break;\\r\\n      case 'nextExperience':\\r\\n        newState = experienceIndex + step;\\r\\n        if (newState > experienceLength) {\\r\\n          newState = baseIndex;\\r\\n        }\\r\\n        setExperienceIndex(newState);\\r\\n        break;\\r\\n      case 'nextEducation':\\r\\n        newState = educationIndex + step;\\r\\n        if (newState > educationLength) {\\r\\n          newState = baseIndex;\\r\\n        }\\r\\n        setEducationIndex(newState);\\r\\n        break;\\r\\n      default:\\r\\n        console.log('Navigation error.');\\r\\n    }\\r\\n  };\\r\\n\\r\\n  /* \\r\\n      This function generates content for specifically an array of type GroupSet.\\r\\n      This is a good example of factoring out a function for a specific task.\\r\\n    */\\r\\n\\r\\n  const generateGroupSet = (groupSet: GroupSet[]) => {\\r\\n    let groupSetContent: any[] = [];\\r\\n    for (let group of groupSet) {\\r\\n      let groupContent: any[] = [];\\r\\n      let groupClass: string = '';\\r\\n      for (let item of group.group) {\\r\\n        if (item.title) {\\r\\n          groupContent.push(\\r\\n            <div className=\\\"title\\\">\\r\\n              <h3>{item.title}</h3>\\r\\n            </div>\\r\\n          );\\r\\n        }\\r\\n        if (item.dates) {\\r\\n          groupContent.push(\\r\\n            <ListItem key={item.dates} className=\\\"dates\\\">\\r\\n              <ListItemText primary={item.dates} />\\r\\n            </ListItem>\\r\\n          );\\r\\n        }\\r\\n        if (item.classes) {\\r\\n          groupClass = item.classes;\\r\\n        }\\r\\n        if (item.description) {\\r\\n          groupContent.push(\\r\\n            <ListItem key={item.description} className=\\\"description\\\">\\r\\n              <ListItemText primary={item.description} />\\r\\n            </ListItem>\\r\\n          );\\r\\n        }\\r\\n        if (item.jobTitle) {\\r\\n          groupContent.push(\\r\\n            <ListItem key={item.jobTitle} className=\\\"job-title\\\">\\r\\n              <ListItemText primary={item.jobTitle} />\\r\\n            </ListItem>\\r\\n          );\\r\\n        }\\r\\n        if (item.text) {\\r\\n          groupContent.push(\\r\\n            <ListItem key={item.text} className=\\\"group-text\\\">\\r\\n              <ListItemIcon>\\r\\n                <span className=\\\"material-icons\\\">layers</span>\\r\\n              </ListItemIcon>\\r\\n              <ListItemText primary={item.text} />\\r\\n            </ListItem>\\r\\n          );\\r\\n        }\\r\\n        if (item.skills) {\\r\\n          let skills: any[] = [];\\r\\n          for (let skill of item.skills) {\\r\\n            skills.push(<Chip size=\\\"small\\\" label={skill} className=\\\"skill\\\" />);\\r\\n          }\\r\\n          groupContent.push(<div className=\\\"skills\\\">{skills}</div>);\\r\\n        }\\r\\n      }\\r\\n      groupSetContent.push(<div className={groupClass}>{groupContent}</div>);\\r\\n    }\\r\\n    return groupSetContent;\\r\\n  };\\r\\n\\r\\n  /* \\r\\n      This function handles specifically the generation of content for the inside\\r\\n      of the cards within the page.\\r\\n    */\\r\\n  const formatContent = (contentSet: CardContent) => {\\r\\n    let formattedContent: any[] = [];\\r\\n    let title: string = contentSet.title;\\r\\n    let contentGroup: any[] = contentSet.content;\\r\\n    for (let content of contentGroup) {\\r\\n      if (content.title) {\\r\\n        formattedContent.push(<h3>{title}</h3>);\\r\\n      }\\r\\n      if (content.linkset) {\\r\\n        const imageSet = {\\r\\n          ketomate,\\r\\n          hp,\\r\\n          nike,\\r\\n        };\\r\\n        const image = imageSet[content.linkset.img];\\r\\n        formattedContent.push(\\r\\n          <ListItem key={content.linkset.title} className=\\\"linkset\\\">\\r\\n            <a\\r\\n              href={content.linkset.url}\\r\\n              target=\\\"_blank\\\"\\r\\n              rel=\\\"noopener noreferrer\\\"\\r\\n            >\\r\\n              <div>\\r\\n                <img src={image} alt={content.linkset.title} />\\r\\n                <h3>{content.linkset.title}</h3>\\r\\n              </div>\\r\\n            </a>\\r\\n            <p>{content.linkset.text}</p>\\r\\n          </ListItem>\\r\\n        );\\r\\n      }\\r\\n      if (content.skillset) {\\r\\n        formattedContent.push(\\r\\n          <Box component=\\\"fieldset\\\" mb={3} borderColor=\\\"transparent\\\">\\r\\n            <h3>{content.skillset.title}</h3>\\r\\n            <Rating name=\\\"read-only\\\" value={content.skillset.value} readOnly />\\r\\n            <p>{content.skillset.text}</p>\\r\\n          </Box>\\r\\n        );\\r\\n      }\\r\\n      if (content.groupSet) {\\r\\n        let generatedGroupSet: any[];\\r\\n        let groupSetLength: number = 0;\\r\\n        let groupSetContent: any;\\r\\n        let previousIcon = (\\r\\n          <span className=\\\"material-icons\\\">navigate_before</span>\\r\\n        );\\r\\n        let nextIcon = <span className=\\\"material-icons\\\">navigate_next</span>;\\r\\n        generatedGroupSet = generateGroupSet(content.groupSet);\\r\\n        groupSetLength = generatedGroupSet.length;\\r\\n        if (title === 'Experience') {\\r\\n          experienceLength = groupSetLength - 1;\\r\\n          groupSetContent = generatedGroupSet[experienceIndex];\\r\\n        }\\r\\n        if (title === 'Education') {\\r\\n          educationLength = groupSetLength - 1;\\r\\n          groupSetContent = generatedGroupSet[educationIndex];\\r\\n        }\\r\\n        formattedContent.push(\\r\\n          <div className=\\\"group-set\\\">\\r\\n            <div className=\\\"group-set-content\\\">{groupSetContent}</div>\\r\\n            <div className=\\\"group-set-nav\\\">\\r\\n              <div>\\r\\n                <Button\\r\\n                  variant=\\\"contained\\\"\\r\\n                  startIcon={previousIcon}\\r\\n                  onClick={() => navigate('previous', title)}\\r\\n                >\\r\\n                  Previous\\r\\n                </Button>\\r\\n              </div>\\r\\n              <div>\\r\\n                <Button\\r\\n                  variant=\\\"contained\\\"\\r\\n                  endIcon={nextIcon}\\r\\n                  onClick={() => navigate('next', title)}\\r\\n                >\\r\\n                  Next\\r\\n                </Button>\\r\\n              </div>\\r\\n            </div>\\r\\n          </div>\\r\\n        );\\r\\n      }\\r\\n      if (content.text) {\\r\\n        formattedContent.push(\\r\\n          <ListItem key={content.text}>\\r\\n            <ListItemText primary={content.text} />\\r\\n          </ListItem>\\r\\n        );\\r\\n      }\\r\\n    }\\r\\n    return <List>{formattedContent}</List>;\\r\\n  };\\r\\n\\r\\n  /* \\r\\n    This function handles the generation of cards on this page, as well as\\r\\n    through factored out functions the generation of all content inside\\r\\n    the cards, leaving it the sole function called to create content\\r\\n    on an otherwise empty page.\\r\\n  */\\r\\n  const generateContent = () => {\\r\\n    let contentArray: any[] = [];\\r\\n    let formattedArray: any[] = [];\\r\\n    for (let value of Object.values(homeData)) {\\r\\n      contentArray.push(value);\\r\\n    }\\r\\n    for (let content of contentArray) {\\r\\n      let media: any;\\r\\n      switch (content.media) {\\r\\n        case 'headshot':\\r\\n          media = headshot;\\r\\n          break;\\r\\n        default:\\r\\n          media = null;\\r\\n          break;\\r\\n      }\\r\\n      formattedArray.push(\\r\\n        <CardTemplate\\r\\n          title={content.title}\\r\\n          img={media}\\r\\n          content={formatContent(content)}\\r\\n          classGiven={content.classes}\\r\\n          links={content.links}\\r\\n        />\\r\\n      );\\r\\n    }\\r\\n    return formattedArray;\\r\\n  };\\r\\n\\r\\n  return <main className=\\\"app-home\\\">{generateContent()}</main>;\\r\\n};\\r\\n\\r\\nexport default Home;\\r\\n\";","export default \"/*\\r\\n  This page is another example of consuming a RESTful API, this time\\r\\n  from the StockTwits API. The received information is rendered \\r\\n  using the CardTemplate component from the library, and can be\\r\\n  filtered by clicking on the stock symbol chips.\\r\\n*/\\r\\n\\r\\nimport React from 'react';\\r\\nimport './StockTwits.scss';\\r\\n\\r\\nimport CardTemplate from '../Library/Card';\\r\\n\\r\\nimport Button from '@material-ui/core/Button';\\r\\nimport TextField from '@material-ui/core/TextField';\\r\\nimport InputAdornment from '@material-ui/core/InputAdornment';\\r\\nimport Chip from '@material-ui/core/Chip';\\r\\nimport Badge from '@material-ui/core/Badge';\\r\\nimport CircularProgress from '@material-ui/core/CircularProgress';\\r\\n\\r\\ninterface Props {}\\r\\n\\r\\ninterface State {\\r\\n  symbols: any[];\\r\\n  input: string;\\r\\n  error: string;\\r\\n  interval: any;\\r\\n  currentCount: number;\\r\\n  filter: any[];\\r\\n  loading: boolean;\\r\\n}\\r\\n\\r\\nclass StockTwits extends React.Component<Props, State> {\\r\\n  constructor(props) {\\r\\n    super(props);\\r\\n    this.state = {\\r\\n      symbols: [],\\r\\n      input: '',\\r\\n      error: '',\\r\\n      interval: undefined,\\r\\n      currentCount: 5,\\r\\n      filter: [],\\r\\n      loading: false,\\r\\n    };\\r\\n    this.handleChange = this.handleChange.bind(this);\\r\\n    this.handleSubmit = this.handleSubmit.bind(this);\\r\\n    this.timer = this.timer.bind(this);\\r\\n  }\\r\\n\\r\\n  chips: any[] = [];\\r\\n  tweets: any[] = [];\\r\\n  content: any;\\r\\n\\r\\n  renderChips(symbols: any[]) {\\r\\n    let chips: any[] = [];\\r\\n    for (let symbol of symbols) {\\r\\n      if (symbol.tweets) {\\r\\n        let chipClass = 'chip';\\r\\n        if (this.state.filter.includes(symbol.key)) {\\r\\n          chipClass = 'chip active-chip';\\r\\n        }\\r\\n        chips.push(\\r\\n          <Badge badgeContent={symbol.tweets.length} className=\\\"badge\\\">\\r\\n            <Chip\\r\\n              label={symbol.label}\\r\\n              className={chipClass}\\r\\n              key={symbol.key}\\r\\n              onClick={() => this.chipClick(symbol)}\\r\\n            />\\r\\n          </Badge>\\r\\n        );\\r\\n      }\\r\\n      this.chips = chips;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  setTimer() {\\r\\n    let intervalId = setInterval(this.timer, 60000);\\r\\n    this.setState({\\r\\n      interval: intervalId,\\r\\n      currentCount: 5,\\r\\n    });\\r\\n  }\\r\\n\\r\\n  timer() {\\r\\n    let newCount = this.state.currentCount - 1;\\r\\n    if (newCount >= 0) {\\r\\n      this.setState({ currentCount: newCount });\\r\\n    } else {\\r\\n      this.submitRequest();\\r\\n      clearInterval(this.state.interval);\\r\\n      this.setTimer();\\r\\n    }\\r\\n  }\\r\\n\\r\\n  renderTweets(symbols: any[]) {\\r\\n    let tweets: any[] = [];\\r\\n    let tweetsFound = 0;\\r\\n    for (let symbol of symbols) {\\r\\n      if (symbol.tweets) {\\r\\n        tweetsFound++;\\r\\n        for (const [index, tweet] of symbol.tweets.entries()) {\\r\\n          let message = (\\r\\n            <div key={tweet.user.username + index}>\\r\\n              <figure className=\\\"picture\\\">\\r\\n                <img\\r\\n                  src={tweet.user.avatar_url_ssl}\\r\\n                  alt={tweet.user.username}\\r\\n                />\\r\\n              </figure>\\r\\n              <p className=\\\"namearea\\\">\\r\\n                <span className=\\\"name\\\">{tweet.user.name}</span>{' '}\\r\\n                <span className=\\\"username\\\">@ {tweet.user.username}</span>\\r\\n              </p>\\r\\n              <p className=\\\"text\\\">{tweet.body}</p>\\r\\n            </div>\\r\\n          );\\r\\n          tweets.push(\\r\\n            <CardTemplate content={message} key={index} classGiven=\\\"card\\\" />\\r\\n          );\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    if (tweetsFound > 0) {\\r\\n      this.setTimer();\\r\\n    }\\r\\n    this.tweets = tweets;\\r\\n  }\\r\\n\\r\\n  chipClick(symbol: any) {\\r\\n    let filter: any[] = this.state.filter;\\r\\n    let symbols: any[] = this.state.symbols;\\r\\n    let filteredSymbols: any[] = [];\\r\\n    if (filter.includes(symbol.key)) {\\r\\n      let position = filter.indexOf(symbol.key);\\r\\n      filter.splice(position, 1);\\r\\n      if (filter.length === 0) {\\r\\n        this.setState({ filter });\\r\\n        clearInterval(this.state.interval);\\r\\n        this.renderTweets(symbols);\\r\\n        this.renderChips(symbols);\\r\\n        return;\\r\\n      }\\r\\n    } else {\\r\\n      filter.push(symbol.key);\\r\\n    }\\r\\n    for (let member of filter) {\\r\\n      for (let symbol of symbols) {\\r\\n        if (symbol.key === member) {\\r\\n          filteredSymbols.push(symbol);\\r\\n          break;\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    this.setState({ filter });\\r\\n    clearInterval(this.state.interval);\\r\\n    this.renderTweets(filteredSymbols);\\r\\n    this.renderChips(symbols);\\r\\n  }\\r\\n\\r\\n  async retrieveTweets(symbols: any[]) {\\r\\n    /* Retrieves images from StockTwits using open cors-anywhere proxy */\\r\\n    this.setState({ loading: true });\\r\\n    const proxyUrl = 'https://thingproxy.freeboard.io/fetch/';\\r\\n    const urlBase = 'https://api.stocktwits.com/api/2/streams/symbol/';\\r\\n    const urlEnd = '.json';\\r\\n    const proxiedRequest = (url, options = { headers: {} }) =>\\r\\n      fetch(url, {\\r\\n        ...options,\\r\\n        headers: {\\r\\n          ...options.headers,\\r\\n          'X-Requested-With': 'stock-twits-live-feed',\\r\\n        },\\r\\n      })\\r\\n        .then((res) => res.json())\\r\\n        .catch((error) => this.setState({ error: error }));\\r\\n    for (let symbol of symbols) {\\r\\n      const useUrl = urlBase.concat(symbol.label).concat(urlEnd);\\r\\n      const finalUrl = proxyUrl.concat(useUrl);\\r\\n      await proxiedRequest(finalUrl)\\r\\n        .then((data) => {\\r\\n          symbol.tweets = data.messages;\\r\\n        })\\r\\n        .catch((error) => this.setState({ error: error }));\\r\\n    }\\r\\n    if (!this.state.error && symbols[0].tweets) {\\r\\n      this.renderChips(symbols);\\r\\n      this.renderTweets(symbols);\\r\\n    }\\r\\n    this.setState({ loading: false });\\r\\n    return symbols;\\r\\n  }\\r\\n\\r\\n  async submitRequest() {\\r\\n    const newSymbols = this.state.input\\r\\n      .toUpperCase()\\r\\n      .replace(/\\\\s+/g, '')\\r\\n      .split(',');\\r\\n    let formattedSymbols: any[] = [];\\r\\n    let key: number = 0;\\r\\n    for (let symbol of newSymbols) {\\r\\n      formattedSymbols.push({ key: key, label: symbol, tweets: null });\\r\\n      key++;\\r\\n    }\\r\\n    formattedSymbols = await this.retrieveTweets(formattedSymbols);\\r\\n    this.setState({ symbols: formattedSymbols });\\r\\n  }\\r\\n\\r\\n  handleChange(event: any) {\\r\\n    this.setState({ input: event.target.value });\\r\\n  }\\r\\n\\r\\n  handleSubmit(event: any) {\\r\\n    this.submitRequest();\\r\\n    event.preventDefault();\\r\\n  }\\r\\n\\r\\n  componentWillUnmount() {\\r\\n    clearInterval(this.state.interval);\\r\\n  }\\r\\n\\r\\n  render() {\\r\\n    if (this.state.loading) {\\r\\n      this.content = <CircularProgress />;\\r\\n    } else if (this.state.error) {\\r\\n      this.content = <p>{this.state.error}</p>;\\r\\n    } else if (this.tweets[0]) {\\r\\n      this.content = (\\r\\n        <section className=\\\"content\\\">\\r\\n          <section className=\\\"chips\\\">{this.chips}</section>\\r\\n          <section className=\\\"tweets\\\">{this.tweets}</section>\\r\\n        </section>\\r\\n      );\\r\\n    } else {\\r\\n      this.content = null;\\r\\n    }\\r\\n    return (\\r\\n      <main className=\\\"app-stocktwits\\\">\\r\\n        <section className=\\\"search\\\">\\r\\n          <form>\\r\\n            <TextField\\r\\n              className=\\\"stock-input\\\"\\r\\n              id=\\\"stock-symbols\\\"\\r\\n              label=\\\"Input stock symbols (separate with a comma)\\\"\\r\\n              value={this.state.input}\\r\\n              onChange={this.handleChange}\\r\\n              InputProps={{\\r\\n                startAdornment: (\\r\\n                  <InputAdornment position=\\\"start\\\">$</InputAdornment>\\r\\n                ),\\r\\n              }}\\r\\n            />\\r\\n            <br />\\r\\n            <Button\\r\\n              className=\\\"search-button\\\"\\r\\n              variant=\\\"contained\\\"\\r\\n              onClick={this.handleSubmit}\\r\\n            >\\r\\n              Search\\r\\n            </Button>\\r\\n          </form>\\r\\n        </section>\\r\\n        {this.content}\\r\\n      </main>\\r\\n    );\\r\\n  }\\r\\n}\\r\\n\\r\\nexport default StockTwits;\\r\\n\";","export default \"/*\\r\\n  This page demonstrates React's ability to consume RESTful APIs in real time.\\r\\n  Of particular use and note, is that the react page loads, and then sends a \\r\\n  request for content that is able to be live loaded into the page without\\r\\n  a refresh. It is also a good example of abstraction in React, where multiple\\r\\n  components are defined within this component, segmented by function.\\r\\n*/\\r\\nimport React from 'react';\\r\\nimport './xkcd.css';\\r\\nimport { reactLogo } from '../../Resources/images/index';\\r\\n\\r\\nimport CardTemplate from '../Library/Card';\\r\\n\\r\\ninterface Props {\\r\\n  img?: any;\\r\\n  onClick?: any;\\r\\n  className?: any;\\r\\n}\\r\\n\\r\\ninterface State {\\r\\n  images?: any;\\r\\n  index: number;\\r\\n  initialIndex: number;\\r\\n  finalIndex: number;\\r\\n  loading: boolean;\\r\\n}\\r\\n\\r\\nclass Panel extends React.Component<Props> {\\r\\n  panelTitle = this.props.img.title;\\r\\n  panelSrc = this.props.img.img;\\r\\n  panelAlt = this.props.img.alt;\\r\\n  panelFigure = (\\r\\n    <figure>\\r\\n      <img src={this.panelSrc} alt={this.panelAlt} />\\r\\n    </figure>\\r\\n  );\\r\\n\\r\\n  render() {\\r\\n    return (\\r\\n      <div>\\r\\n        <CardTemplate\\r\\n          title={this.panelTitle}\\r\\n          content={this.panelFigure}\\r\\n          classGiven=\\\"card panel-card\\\"\\r\\n        />\\r\\n      </div>\\r\\n    );\\r\\n  }\\r\\n}\\r\\n\\r\\nclass NavBar extends React.Component<Props> {\\r\\n  render() {\\r\\n    return (\\r\\n      <nav>\\r\\n        <button onClick={() => this.props.onClick('first')}>First</button>\\r\\n        <button onClick={() => this.props.onClick('previous')}>Previous</button>\\r\\n        <button onClick={() => this.props.onClick('next')}>Next</button>\\r\\n        <button onClick={() => this.props.onClick('last')}>Last</button>\\r\\n      </nav>\\r\\n    );\\r\\n  }\\r\\n}\\r\\n\\r\\nclass XKCD extends React.Component<Props, State> {\\r\\n  constructor(props: any) {\\r\\n    super(props);\\r\\n    this.state = {\\r\\n      images: Array(3).fill(''),\\r\\n      index: 1,\\r\\n      initialIndex: 1,\\r\\n      finalIndex: 0,\\r\\n      loading: true,\\r\\n    };\\r\\n  }\\r\\n\\r\\n  async retrieveImages(index: any) {\\r\\n    /* Retrieves images from XKCD using open cors-anywhere proxy */\\r\\n    this.setState({ loading: true });\\r\\n    this.setState({ images: Array(3).fill(null) });\\r\\n    const proxyUrl = 'https://thingproxy.freeboard.io/fetch/';\\r\\n    const urlBase = 'http://xkcd.com/';\\r\\n    const urlEnd = '/info.0.json';\\r\\n    const currentUrl = 'http://xkcd.com/info.0.json';\\r\\n    let currentIndex = index;\\r\\n    const urlArray: any[] = [];\\r\\n    for (let i = 0; i < 3; i++) {\\r\\n      const createUrl = urlBase.concat(currentIndex).concat(urlEnd);\\r\\n      urlArray.push(createUrl);\\r\\n      currentIndex++;\\r\\n    }\\r\\n    const proxiedRequest = (url: string, options = { headers: {} }) =>\\r\\n      fetch(url, {\\r\\n        ...options,\\r\\n        headers: {\\r\\n          ...options.headers,\\r\\n          'X-Requested-With': 'xkcd-slideshow',\\r\\n        },\\r\\n      })\\r\\n        .then((res) => res.json())\\r\\n        .catch((error) => console.error(error));\\r\\n    if (this.state.finalIndex === 0) {\\r\\n      const finalUrl = proxyUrl.concat(currentUrl);\\r\\n      await proxiedRequest(finalUrl)\\r\\n        .then((data) => {\\r\\n          const finalPlaceholder = data.num - 2;\\r\\n          this.setState({ finalIndex: finalPlaceholder });\\r\\n        })\\r\\n        .catch((error) => console.error(error));\\r\\n    }\\r\\n    const dataArray: any[] = [];\\r\\n    for (const useUrl of urlArray) {\\r\\n      const finalUrl = proxyUrl.concat(useUrl);\\r\\n      await proxiedRequest(finalUrl)\\r\\n        .then((data: any) => {\\r\\n          dataArray.push(data);\\r\\n        })\\r\\n        .catch((error) => console.error(error));\\r\\n    }\\r\\n    this.setState({ images: dataArray });\\r\\n    this.setState({ loading: false });\\r\\n  }\\r\\n\\r\\n  renderPanels(i: number) {\\r\\n    return <Panel img={this.state.images[i]} className=\\\"panel\\\" />;\\r\\n  }\\r\\n\\r\\n  navigate(input: string) {\\r\\n    const step = 3;\\r\\n    let newState = 1;\\r\\n    switch (input) {\\r\\n      case 'first':\\r\\n        newState = this.state.initialIndex;\\r\\n        break;\\r\\n      case 'previous':\\r\\n        newState = this.state.index - step;\\r\\n        if (newState < this.state.initialIndex) {\\r\\n          newState = this.state.initialIndex;\\r\\n        }\\r\\n        break;\\r\\n      case 'next':\\r\\n        newState = this.state.index + step;\\r\\n        if (newState > this.state.finalIndex) {\\r\\n          newState = this.state.finalIndex;\\r\\n        }\\r\\n        break;\\r\\n      case 'last':\\r\\n        newState = this.state.finalIndex;\\r\\n        break;\\r\\n      default:\\r\\n        console.log('Navigation error.');\\r\\n    }\\r\\n    this.retrieveImages(newState);\\r\\n    this.setState({ index: newState });\\r\\n  }\\r\\n\\r\\n  componentDidMount() {\\r\\n    this.retrieveImages(this.state.index);\\r\\n  }\\r\\n\\r\\n  render() {\\r\\n    return (\\r\\n      <div className=\\\"xkcd\\\">\\r\\n        {this.state.loading ? (\\r\\n          <img src={reactLogo} className=\\\"loading-logo\\\" alt=\\\"logo\\\" />\\r\\n        ) : this.state.images[0] ? (\\r\\n          <main className=\\\"slideshow\\\">\\r\\n            {this.renderPanels(0)}\\r\\n            {this.renderPanels(1)}\\r\\n            {this.renderPanels(2)}\\r\\n          </main>\\r\\n        ) : (\\r\\n          <p>Loading error</p>\\r\\n        )}\\r\\n        <footer className=\\\"xkcd-footer\\\">\\r\\n          <NavBar onClick={(i: string) => this.navigate(i)} />\\r\\n          <section className=\\\"credit\\\">\\r\\n            <p>\\r\\n              Sincere thanks to{' '}\\r\\n              <a href=\\\"https://xkcd.com\\\">Randlal Munroe over at XKCD</a> for\\r\\n              making such an awesome webcomic.\\r\\n            </p>\\r\\n          </section>\\r\\n        </footer>\\r\\n      </div>\\r\\n    );\\r\\n  }\\r\\n}\\r\\n\\r\\nexport default XKCD;\\r\\n\";","export default \"import React, { useEffect, useState } from 'react';\\r\\nimport './App.scss';\\r\\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\\r\\nimport Slide from '@material-ui/core/Slide';\\r\\n\\r\\nimport Header from './Components/Library/Header';\\r\\nimport NavBar from './Components/Library/NavBar';\\r\\nimport LoadScreen from './Components/Library/LoadScreen';\\r\\n\\r\\nimport Home from './Components/Home/Home';\\r\\nimport HomeViewer from './Components/Home/Home.codeview';\\r\\nimport StockTwits from './Components/Stocktwits/Stocktwits';\\r\\nimport StockViewer from './Components/Stocktwits/StockTwits.codeview';\\r\\nimport XKCD from './Components/XKCD/xkcd';\\r\\nimport XKCDViewer from './Components/XKCD/xkcd.codeview';\\r\\nimport Portfolio from './Components/Portfolio/Portfolio';\\r\\nimport PortfolioViewer from './Components/Portfolio/Portfolio.codeview';\\r\\nimport Library from './Components/Library/Library';\\r\\nimport LibraryViewer from './Components/Library/Library.codeview';\\r\\nimport Portal from './Components/Library/Portal/Portal';\\r\\nimport PortalViewer from './Components/Library/Portal/Portal.codeview';\\r\\n\\r\\ninterface PageInterface {\\r\\n  text: string;\\r\\n  title: string;\\r\\n  route: string;\\r\\n  icon: string;\\r\\n  component: any;\\r\\n  codeView?: any;\\r\\n  exactRoute?: boolean;\\r\\n}\\r\\n\\r\\nconst App = () => {\\r\\n  const [navShow, setNavShow] = useState(false);\\r\\n  const [navShowClass, setNavShowClass] = useState('app app-without-menu');\\r\\n  const pages: PageInterface[] = [\\r\\n    {\\r\\n      text: 'Home',\\r\\n      title: 'Adair Daniels',\\r\\n      route: '/',\\r\\n      icon: 'home',\\r\\n      component: <Home />,\\r\\n      codeView: <HomeViewer />,\\r\\n      exactRoute: true,\\r\\n    },\\r\\n    {\\r\\n      text: 'PokeTable',\\r\\n      title: 'PokeTable',\\r\\n      route: '/poketable',\\r\\n      icon: 'table_view',\\r\\n      component: (\\r\\n        <Portal\\r\\n          url=\\\"https://andeleidun.github.io/pokeTable/\\\"\\r\\n          title=\\\"PokeTable\\\"\\r\\n        />\\r\\n      ),\\r\\n      codeView: <PortalViewer />,\\r\\n    },\\r\\n    {\\r\\n      text: 'StockTwits Feed',\\r\\n      title: 'StockTwits Feed',\\r\\n      route: '/stock',\\r\\n      icon: 'dvr',\\r\\n      component: <StockTwits />,\\r\\n      codeView: <StockViewer />,\\r\\n    },\\r\\n    {\\r\\n      text: 'XKCD Slideshow',\\r\\n      title: 'XKCD Slideshow',\\r\\n      route: '/xkcd',\\r\\n      icon: 'burst_mode',\\r\\n      component: <XKCD />,\\r\\n      codeView: <XKCDViewer />,\\r\\n    },\\r\\n    {\\r\\n      text: 'Portfolio',\\r\\n      title: 'Portfolio',\\r\\n      route: '/portfolio',\\r\\n      icon: 'compare',\\r\\n      component: <Portfolio />,\\r\\n      codeView: <PortfolioViewer />,\\r\\n    },\\r\\n    {\\r\\n      text: 'Library',\\r\\n      title: 'Library',\\r\\n      route: '/library',\\r\\n      icon: 'library_books',\\r\\n      component: <Library />,\\r\\n      codeView: <LibraryViewer />,\\r\\n    },\\r\\n  ];\\r\\n  const [currentPage, setCurrentPage] = useState(pages[0]);\\r\\n  const [codeView, setCodeView] = useState(false);\\r\\n  const [loading, setLoading] = useState(true);\\r\\n\\r\\n  useEffect(() => {\\r\\n    if (loading) {\\r\\n      setLoading(false);\\r\\n    }\\r\\n  }, [loading]);\\r\\n\\r\\n  const toggleNav = () => {\\r\\n    if (navShow) {\\r\\n      setNavShowClass('app app-without-menu ');\\r\\n    } else {\\r\\n      setNavShowClass('app app-with-menu ');\\r\\n    }\\r\\n    setNavShow(!navShow);\\r\\n  };\\r\\n\\r\\n  const toggleCodeView = () => {\\r\\n    setCodeView(!codeView);\\r\\n  };\\r\\n\\r\\n  const navigate = (page: PageInterface) => {\\r\\n    setCurrentPage(page);\\r\\n  };\\r\\n\\r\\n  const generateOverlay = () => {\\r\\n    if (navShow) {\\r\\n      return <div className=\\\"app-overlay-mobile\\\" onClick={() => toggleNav()} />;\\r\\n    }\\r\\n  };\\r\\n\\r\\n  const generateComponent = () => {\\r\\n    let generatedContent: any[] = [];\\r\\n    for (let page of pages) {\\r\\n      let component: any;\\r\\n      if (codeView) {\\r\\n        component = page.codeView;\\r\\n      } else {\\r\\n        component = page.component;\\r\\n      }\\r\\n      generatedContent.push(\\r\\n        <Route\\r\\n          path={page.route}\\r\\n          exact={page.exactRoute}\\r\\n          key={page.title}\\r\\n          children={component}\\r\\n        />\\r\\n      );\\r\\n    }\\r\\n    return (\\r\\n      <Switch>\\r\\n        {generatedContent}\\r\\n        <Route path=\\\"/\\\" children={pages[0].component} key={0} />\\r\\n      </Switch>\\r\\n    );\\r\\n  };\\r\\n\\r\\n  return (\\r\\n    <BrowserRouter basename={process ? process.env.PUBLIC_URL : ''}>\\r\\n      <div className={navShowClass}>\\r\\n        <Header\\r\\n          onClick={() => toggleNav()}\\r\\n          currentPage={currentPage}\\r\\n          codeView={codeView}\\r\\n          toggleCodeView={() => toggleCodeView()}\\r\\n        />\\r\\n        <Slide direction=\\\"right\\\" in={navShow} mountOnEnter unmountOnExit>\\r\\n          <div className=\\\"app-menu\\\">\\r\\n            <NavBar\\r\\n              pages={pages}\\r\\n              navClick={(page: PageInterface) => navigate(page)}\\r\\n              codeView={codeView}\\r\\n              toggleCodeView={() => toggleCodeView()}\\r\\n            />\\r\\n          </div>\\r\\n        </Slide>\\r\\n        {generateOverlay()}\\r\\n        <div className=\\\"app-main\\\">\\r\\n          {loading ? (\\r\\n            <LoadScreen />\\r\\n          ) : (\\r\\n            <div className=\\\"app-content\\\">{generateComponent()}</div>\\r\\n          )}\\r\\n        </div>\\r\\n      </div>\\r\\n    </BrowserRouter>\\r\\n  );\\r\\n};\\r\\n\\r\\nexport default App;\\r\\n\";","export default \"import React from 'react';\\n\\nimport Card from '@material-ui/core/Card';\\nimport CardActions from '@material-ui/core/CardActions';\\nimport CardContent from '@material-ui/core/CardContent';\\nimport CardMedia from '@material-ui/core/CardMedia';\\nimport Button from '@material-ui/core/Button';\\n\\nconst CardTemplate = (props) => {\\n  const { img, title, text, content, classGiven, links } = props;\\n\\n  const generateLinks = () => {\\n    if (links) {\\n      let generatedLinks: any[] = [];\\n      for (let link of links) {\\n        generatedLinks.push(\\n          <a\\n            href={link.url ? link.url : null}\\n            onClick={link.onClick ? link.onClick : null}\\n            target=\\\"_blank\\\"\\n            rel=\\\"noopener noreferrer\\\"\\n          >\\n            <Button className=\\\"card-button\\\" fullWidth>\\n              {link.text}\\n            </Button>\\n          </a>\\n        );\\n      }\\n      return (\\n        <CardActions className=\\\"card-buttons\\\">{generatedLinks}</CardActions>\\n      );\\n    }\\n  };\\n\\n  const generateMedia = () => {\\n    if (img) {\\n      return <CardMedia className=\\\"media-area\\\" image={img} title={title} />;\\n    }\\n  };\\n\\n  const generateContent = () => {\\n    let genContent: any[] = [];\\n\\n    if (title) {\\n      genContent.push(<h2>{title}</h2>);\\n    }\\n    if (text) {\\n      genContent.push(<p>{text}</p>);\\n    }\\n    if (content) {\\n      genContent.push(content);\\n    }\\n    return genContent;\\n  };\\n\\n  return (\\n    <Card className={classGiven}>\\n      {generateMedia()}\\n      <CardContent>{generateContent()}</CardContent>\\n      {generateLinks()}\\n    </Card>\\n  );\\n};\\n\\nexport default CardTemplate;\\n\";","export default \"import React from 'react';\\r\\n\\r\\nimport AppBar from '@material-ui/core/AppBar';\\r\\nimport Toolbar from '@material-ui/core/Toolbar';\\r\\nimport IconButton from '@material-ui/core/IconButton';\\r\\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\\r\\nimport Switch from '@material-ui/core/Switch';\\r\\n\\r\\nconst Header = (props) => {\\r\\n  const handleChange = () => {\\r\\n    props.toggleCodeView();\\r\\n  };\\r\\n\\r\\n  const generateCodeView = () => {\\r\\n    if (props.currentPage.codeView) {\\r\\n      let codeViewBar: any = (\\r\\n        <div className=\\\"code-view-bar\\\">\\r\\n          <FormControlLabel\\r\\n            control={\\r\\n              <Switch\\r\\n                checked={props.codeView}\\r\\n                onChange={handleChange}\\r\\n                name=\\\"codeView\\\"\\r\\n              />\\r\\n            }\\r\\n            label=\\\"Code View\\\"\\r\\n          />\\r\\n        </div>\\r\\n      );\\r\\n      return codeViewBar;\\r\\n    }\\r\\n  };\\r\\n\\r\\n  return (\\r\\n    <header className=\\\"app-header\\\">\\r\\n      <AppBar position=\\\"static\\\">\\r\\n        <IconButton\\r\\n          edge=\\\"start\\\"\\r\\n          aria-label=\\\"menu\\\"\\r\\n          className=\\\"menu-button\\\"\\r\\n          onClick={props.onClick}\\r\\n        >\\r\\n          <i className=\\\"material-icons\\\">menu</i>\\r\\n        </IconButton>\\r\\n        <Toolbar className=\\\"title-bar\\\">\\r\\n          <h1>{props.currentPage.title}</h1>\\r\\n        </Toolbar>\\r\\n        {generateCodeView()}\\r\\n      </AppBar>\\r\\n    </header>\\r\\n  );\\r\\n};\\r\\n\\r\\nexport default Header;\\r\\n\";","export default \"import React from 'react';\\r\\nimport { Link } from 'react-router-dom';\\r\\n\\r\\nimport List from '@material-ui/core/List';\\r\\nimport ListItem from '@material-ui/core/ListItem';\\r\\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\\r\\nimport ListItemText from '@material-ui/core/ListItemText';\\r\\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\\r\\nimport Switch from '@material-ui/core/Switch';\\r\\n\\r\\nconst NavBar = (props) => {\\r\\n  const handleChange = () => {\\r\\n    props.toggleCodeView();\\r\\n  };\\r\\n\\r\\n  const populatePages = () => {\\r\\n    let populatedPages: any[] = [];\\r\\n    for (let page of props.pages) {\\r\\n      populatedPages.push(\\r\\n        <Link\\r\\n          to={page.route}\\r\\n          onClick={() => props.navClick(page)}\\r\\n          key={page.text}\\r\\n        >\\r\\n          <ListItem button>\\r\\n            <ListItemIcon>\\r\\n              <i className=\\\"material-icons\\\">{page.icon}</i>\\r\\n            </ListItemIcon>\\r\\n            <ListItemText primary={page.text} />\\r\\n          </ListItem>\\r\\n        </Link>\\r\\n      );\\r\\n    }\\r\\n    return populatedPages;\\r\\n  };\\r\\n\\r\\n  const populateOptions = () => {\\r\\n    let options: any[] = [\\r\\n      <ListItem className=\\\"code-view-bar\\\">\\r\\n        <FormControlLabel\\r\\n          control={\\r\\n            <Switch\\r\\n              checked={props.codeView}\\r\\n              onChange={handleChange}\\r\\n              name=\\\"codeView\\\"\\r\\n            />\\r\\n          }\\r\\n          label=\\\"Code View\\\"\\r\\n        />\\r\\n      </ListItem>,\\r\\n    ];\\r\\n    return options;\\r\\n  };\\r\\n\\r\\n  return (\\r\\n    <nav className=\\\"app-nav\\\">\\r\\n      <List>\\r\\n        {populatePages()}\\r\\n        {populateOptions()}\\r\\n      </List>\\r\\n    </nav>\\r\\n  );\\r\\n};\\r\\n\\r\\nexport default NavBar;\\r\\n\";","export default \"import React, { useState } from 'react';\\r\\nimport './Library.scss';\\r\\n\\r\\nimport Viewer from 'react-code-viewer';\\r\\nimport { highlight, languages } from 'prismjs/components/prism-core';\\r\\nimport 'prismjs/components/prism-clike';\\r\\nimport 'prismjs/components/prism-javascript';\\r\\nimport 'prismjs/components/prism-markup';\\r\\nimport '../Library/CodeView.css';\\r\\nimport CardTemplate from './Card';\\r\\n\\r\\nimport AppCode from './App.codeview';\\r\\nimport CardCode from './Card/Card.codeview';\\r\\nimport HeaderCode from './Header/Header.codeview';\\r\\nimport NavBarCode from './NavBar/NavBar.codeview';\\r\\n\\r\\nrequire('prismjs/components/prism-jsx');\\r\\n\\r\\nconst Library = () => {\\r\\n  const components = [\\r\\n    { index: 0, title: 'App', code: AppCode },\\r\\n    { index: 1, title: 'Card', code: CardCode },\\r\\n    { index: 2, title: 'Header', code: HeaderCode },\\r\\n    { index: 3, title: 'Nav Bar', code: NavBarCode },\\r\\n  ];\\r\\n  const [codeState, setCodeState] = useState(components[0].code);\\r\\n\\r\\n  const navigate = (index: number) => {\\r\\n    setCodeState(components[index].code);\\r\\n  };\\r\\n\\r\\n  const links = [\\r\\n    { onClick: () => navigate(0), text: 'App' },\\r\\n    { onClick: () => navigate(1), text: 'Card' },\\r\\n    { onClick: () => navigate(2), text: 'Header' },\\r\\n    { onClick: () => navigate(3), text: 'Nav Bar' },\\r\\n  ];\\r\\n\\r\\n  const generateOptions = () => {\\r\\n    let generatedOptions: any[] = [];\\r\\n\\r\\n    generatedOptions.push(\\r\\n      <CardTemplate\\r\\n        title={'Library Navigation'}\\r\\n        links={links}\\r\\n        classGiven=\\\"card library-card\\\"\\r\\n      />\\r\\n    );\\r\\n    return generatedOptions;\\r\\n  };\\r\\n\\r\\n  const viewer = (\\r\\n    <Viewer\\r\\n      value={codeState}\\r\\n      highlight={(value) => highlight(value, languages.js)}\\r\\n      padding={10}\\r\\n      style={{\\r\\n        fontFamily: '\\\"Fira code\\\", \\\"Fira Mono\\\", monospace',\\r\\n        fontSize: 12,\\r\\n      }}\\r\\n    />\\r\\n  );\\r\\n\\r\\n  return (\\r\\n    <main className=\\\"library-page\\\">\\r\\n      {generateOptions()}\\r\\n      <CardTemplate content={viewer} classGiven=\\\"card\\\" />\\r\\n    </main>\\r\\n  );\\r\\n};\\r\\n\\r\\nexport default Library;\\r\\n\";","export default \"/*\\r\\n  This component uses lazy loading iframes to setup a portal\\r\\n  for separately hosted micro-frontends. This is implemented \\r\\n  with the PokeTable.\\r\\n  PokeTable is a filterable and sortable React data table.\\r\\n  PokeTable code can be found on github -\\r\\n  https://github.com/Andeleidun/pokeTable\\r\\n*/\\r\\nimport React from 'react';\\r\\nimport './Portal.css';\\r\\n\\r\\ninterface Props {\\r\\n  url: string;\\r\\n  title: string;\\r\\n}\\r\\n\\r\\nconst Portal = ({ url, title }: Props) => {\\r\\n  return <iframe src={url} loading=\\\"lazy\\\" className=\\\"portal\\\" title={title} />;\\r\\n};\\r\\n\\r\\nexport default Portal;\\r\\n\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}